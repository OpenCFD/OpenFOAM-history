#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 1991-2007 OpenCFD Ltd.
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software; you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by the
#     Free Software Foundation; either version 2 of the License, or (at your
#     option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM; if not, write to the Free Software Foundation,
#     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# Script
#     runFoamX
#
# Description
#     Loader for FoamX Java Client.
#
#------------------------------------------------------------------------------

Script=${0##*/}

usage() {
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

usage: $Script [-host name] [-port number]

* starts the FoamX server (Name Server, FoamXHostBrowser) and
FoamX client (Java FoamX.jar).

Use the -host, -port options to connect to an already running server

USAGE
    exit 1
}


# getValue file var
#   Prints value of 'var=value' in file.
getValue() {
    val=`grep "^[ \t]*$2[ \t]*=" $1 | sed -e "s/^[ \t]*$2[ \t]*=//" | head -1`
    if [ -z "$val" ]; then
        return 1
    fi
    echo "$val"
    return 0
}

# cleanup
# removes all excess processes and files. Used in signal handler
cleanup() {
    #- reset traps
    trap 0 2 3 15

    #- Did we start up something?
    if [ "$XHB_PID" ]; then
        #- clean up
        killFoamX > /dev/null
    fi
}


## isValid jobControlFile
#isValid() {
#    grep 'startDate' $1 > /dev/null &&   \
#    grep 'startTime' $1 > /dev/null &&   \
#    grep 'userName' $1 > /dev/null &&    \
#    grep 'foamVersion' $1 > /dev/null && \
#    grep 'code' $1 > /dev/null &&        \
#    grep 'currentDir' $1 > /dev/null &&  \
#    grep 'argList' $1 > /dev/null
#
#    return $?
#}


#-------------------------
#
# Main.
#
#-------------------------

#if [ -z "$FOAM_JOB_DIR" ]; then
#    echo "FOAM_JOB_DIR environment variable not set. This should point to the"
#    echo "Foam jobControl directory."
#    echo ""
#    exit 1
#fi

# Make sure that the FoamX configuration directory is available.
if [ ! -d "$FOAMX_CONFIG" ] ; then
    echo "Can't find FoamX configuration directory at $FOAMX_CONFIG."
    exit 1
fi

# Make sure that the FoamX client configuration file is available.
if [ ! -r "$FOAMX_CONFIG/FoamXClient.cfg" ] ; then
    echo "Can't find FoamX FoamXClient.cfg file in $FOAMX_CONFIG."
    exit 1
fi

#- Get host and port from FoamX client client configuration file.
#
HOSTNAME=`getValue "$FOAMX_CONFIG/FoamXClient.cfg" 'org.omg.CORBA.ORBInitialHost'`
if [ $? -ne 0 ]; then
    HOSTNAME=`uname -n`
fi
HOSTPORT=`getValue "$FOAMX_CONFIG/FoamXClient.cfg" 'org.omg.CORBA.ORBInitialPort'`
if [ $? -ne 0 ]; then
    HOSTPORT=1234
fi

#- Parse arguments.
argPort=""
argHost=""
args=""
while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help)
        usage
        ;;
    -host)
        argHost=$2
        shift 2
        ;;
    -port)
        argPort=$2
        shift 2
        ;;
    *)
        args="$args $1"
        shift
        ;;
    esac
done


# Install handler for interrupts
XHB_PID=''
trap cleanup 0 2 3 15


#- Use STARTUP flag to determine whether or not to run runFoamXHB
if [ "$argPort" -o "$argHost" ]; then
    echo "Connecting to server running on $argHost , port $argPort"
    HOSTNAME=${argHost:-$HOSTNAME}
    HOSTPORT=${argPort:-$HOSTPORT}
elif [ -r $FOAMX_CONFIG/ns.ref ]; then
    echo "Warning: a server already seems to be running."
    echo "(Detected server reference $FOAMX_CONFIG/ns.ref)"
    echo "Do you want to kill this server ? (n)"
    read answ
    answ=${answ:-n}
    if [ "$answ" = 'y' ]; then
        killFoamX
        runFoamXHB < /dev/null&
        XHB_PID=$!
    fi
else
    killFoamX > /dev/null
    runFoamXHB < /dev/null&
    XHB_PID=$!
fi


##- Remove any invalid entries in finishedJobs
##  (upset ProcessEditor)
#(
#    cd $FOAM_JOB_DIR
#    if [ "`ls finishedJobs`" ]; then
#        for f in finishedJobs/*
#        do
#            isValid $f
#            if [ $? -ne 0 ]; then
#                echo "Removing invalid job file $f"
#                rm -f $f
#            fi
#        done
#        echo ""
#    fi
#)

if [ "$XHB_PID" ]; then
    #- Wait for nsd to have started
    while [ ! -f $FOAMX_CONFIG/ns.ref ]
    do
        sleep 1
    done

    #- Wait for runFoamXHB to have started
    while [ ! -f $FOAMX_CONFIG/HostBrowserLog.xml ]
    do
        sleep 1
    done
fi

#- For mico > 2.3.7 : force to use 1.0
#orbArgs="-ORBDefaultInitRef corbaloc:iiop:1.0:$HOSTNAME:$HOSTPORT"
orbArgs="-ORBDefaultInitRef corbaloc:iiop:1.0:$HOSTNAME:$HOSTPORT -ORBInitialPort $HOSTPORT -ORBInitialHost $HOSTNAME"
#echo "Starting Java with ORB arguments : $orbArgs"

# Set Language to English
oldLang=$LANG
export LANG=en_EN
echo "Setting LANG to $LANG"

#------------------------------------------------------------------------------
# Run FoamX via jar file.
jars='.'
for f in $FOAMX_PATH/lib/*.jar
do
    echo "Using jar $f"
    jars="${jars}:${f}"
done
$jdkhome/bin/java \
    -cp "$jars" \
    -DFoamX.SystemPath=$WM_PROJECT_DIR \
    -DFoamX.SystemConfigPath=$FOAMX_CONFIG \
    -DFoamX.UserConfigPath=$FOAMX_CONFIG \
    FoamX.App $orbArgs $args

#------------------------------------------------------------------------------

# Reset Language to original
export LANG=$oldLang
