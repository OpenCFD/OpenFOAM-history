#                            -*- mode: org; -*-
#
#+TITLE:          *OpenFOAM release notes for version 1.6*
#+AUTHOR:                      OpenCFD Ltd.
#+DATE:                         July 2009
#+LINK:                  http://www.opencfd.co.uk
#+OPTIONS: author:nil ^:{}

* Overview
  OpenFOAM-1.6 is is a significant upgrade to version 1.5 in ways which are
  outlined below.  This release passes all our standard tests and the tutorials
  have been broadly checked.  If there are any bugs, please report them using
  the instructions set out in: http://www.OpenFOAM.org/bugs.html.

* GNU/Linux version
  The 32bit and 64bit binary packs of the OpenFOAM release were compiled on a
  machine running SuSE GNU/Linux version 11.1 and also tested on Ubuntu 9.  We
  recommend that users run OpenFOAM on one of these or a similar recent version
  of GNU/Linux.  This release has also been successfully compiled and tested on
  older GNU/Linux releases but this requires the installation of Qt 4.3.? (the
  sources for which are supplied with OpenFOAM-1.6, see README) for ParaView-3
  to run.

* C++ Compiler version
  + Release compiled with GCC 4.3.3.
  + Built in support for the Intel C++ 10.? compiler (untested).
  + The choice of the compiler is controlled by the setting of the
    ~$WM_COMPILER~ and ~$WM_COMPILER_ARCH~ environment variables in the
    /OpenFOAM-1.6/etc/bashrc/ (or /cshrc/) file.
  + The location of the installation of the compiler is controlled by the
    ~$compilerInstall~ environment variable in the
    /OpenFOAM-1.6/etc/settings.sh/ (or /settings.csh/) file.

* Library developments

*** Turbulence modelling
    + Major development of turbulence model libraries to give extra flexibility
      at the solver level.  For solvers that can support either RAS/LES
      computations, the selection is made in the
      /constant/turbulenceProperties/,
      by setting the =simulationType= keyword to:
      - =laminar=
      - =RASModel=
      - =LESModel=
    + Depending on the selection, the model is the instantiated from /constant//
      - /RASProperties/
      - /LESProperties/

***** RAS wall functions
      Wall functions are now run-time selectable per patch for RAS.

******* Velocity:
        + Apply to turbulent viscosities =nut= or =mut=
        + Apply to =k=, =Q=, =R=
        + Apply to =epsilon=, =omega=

******* Temperature:
        + Apply to turbulent thermal diffusivity, =alphat= (compressible only)

******* To apply wall functions:
        + To recapture the functionality of previous OpenFOAM versions (v1.5 and
          earlier) assign:
          - for velocity:
            - =nut=: =nutWallFunction=
            - =mut=: =muWallFunction=
            - =epsilon=: =epsilonWallFunction=
            - =omega=: =omegaWallFunction=
            - =k=, =Q=, =R=: =kQRWallFunction=
          - for temperature:
            - =alphat=: =alphatWallFunction=
        + New =alphaSgsJayatillekeWallFunction= thermal wall function for
          compressible LES

***** *New* LES turbulence models
      + Spalart-Allmaras DDES
      + Spalart-Allmaras IDDES

***** Upgrading:
      + *New* utility - =applyWallFunctionBoundaryConditions=
      + Solvers will automatically update existing cases
        - New fields created based on the presence of the =nut/mut= field
        - Boundary conditions include scoping, i.e compressibility:: for
          compressible solvers
        - Modified fields will be backed-up to /<field>.old/
      + NOTE:
        - Fields are only updated for those fields associated with the current
          turbulence model selection, i.e. if fields exist for use with other
          models, they will not be updated
        - New specification is not backwards compatible

*** Thermo-physical Models
    + Old compressibility based thermo package renamed
      =basicThermo= \rightarrow =basicPsiThermo=
    + *New* =basicRhoThermo= thermo package
      - Additional density field stored
      - General form - can be used for other types of media, e.g. liquids
      - Additional polynomial-based thermodynamics
        - Equation of state: =icoPolynomial=
        - Transport: =polynomialTransport=
        - Thermo: =hPolynomialThermo=
    + Removed earlier hard-coding of gas thermophysics for chemistry modelling:
      - =reactingMixture= now templated on thermo package
      - =chemistryModel= now templated on thermo package
      - =chemistrySolver= now templated on thermo package
    + *New* =fvDOM= radition model
      - finite volume, discrete ordinates method
    + *New* (reinstated) =eThermo= thermodynamics package
      - internal energy based thermodynamics

*** Lagrangian

***** Intermediate
      - Overhaul of the underlying framework
      - Reacting now split into reacting and reacting multiphase
      - New structure for variable composition
      - Many new sub-models, including:
        - Injection
          - =PatchInjection= - injection local to patch face cells
          - =FieldActivatedInjection= - injection based on satisfying external
            criterion
          - LookupTableInjection - explicity define injection locations and all
            parcel properties
        - Post-processing
          - patch post-processing - collect data for parcels impacting user
            defined patches
        - Patch interaction
          - generalised behaviour for parcel interaction with patch
        - Phase change
          - liquid evaporation

***** Coal combustion
      - *New* library - extension of reacting-multiphase functionality
        - Surface reaction/combustion models

*** Discrete methods
    - *New* library offering DSMC simulation functionality - see =dsmcFoam=
      below
    - *New* libraries offering molecular dynamics simulation functionality - see
      =mdFoam= and =mdEquilibrationFoam=: below.

* Solver restructuring
  The upgrade to the turbulence models means that the simulation type, i.e.
  laminar, RAS or LES can be selected at run time. This has allowed a reduction
  in the number of solvers, simplifying the overall code structure
  + Solvers which support laminar, RAS and LES:
    - =turbFoam=, =oodles= \rightarrow =pisoFoam=
    - =turbDyMFoam= \rightarrow =pimpleDyMFoam=
    - =rhoTurbFoam=, =coodles= \rightarrow =rhoPisoFoam=
    - =xoodles= \rightarrow absorbed into =XiFoam=
    - =buoyantFoam=, =lesBuoyantFoam= \rightarrow =buoyantPisoFoam=
    - =interFoam=, rasInterFoam, =lesInterFoam= \rightarrow =interFoam=
    - =lesCavitatingFoam=, =rasCavitatingFoam= \rightarrow =cavitatingFoam=
  + Solvers which support LES only:
    - =channelOodles= \rightarrow =channelFoam= (LES)

* General changes
  - pd to p ------------------------------------------------------------ [HENRY]
  - gravity ------------------------------------------------------------ [HENRY]

* Tutorial restructuring
  to reflect solver application structure

* Post-processing ---------------------------------------------------- [MATTIJS]
  - SAMPLING - improved plane, iso-surface handling

* *New* Solvers
  + =buoyantBoussinesqSimpleFoam=
    Steady state heat transfer solver using a Boussinesq approximation for
    buoyancy, with laminar, RAS or LES turbulence modelling

  + =buoyantBoussinesqPisoFoam=
    Transient heat transfer solver using a Boussinesq approximation for
    buoyancy, with laminar, RAS or LES turbulence modelling

  + =coalChemistryFoam=
    Transient, reacting lagrangian solver, employing a coal cloud and a thermo
    cloud, with chemistry, and laminar, RAS or LES turbulence modelling

  + =porousExplicitSourceReactingParcelFoam=
    Transient, reacting lagrangian solver, employing a single phase reacting
    cloud, with porous media, explicit mass sources, and laminar, RAS or LES
    turbulence modelling

  + =rhoReactingFoam=
    Density-based thermodynamics variant of the reactingFoam solver, i.e. now
    applicable to liquid systems

  + =dsmcFoam=
    DSMC (Direct Simulation Monte-Carlo) solver for rarefied gas dynamics
    simultions, able to simulate mixtures of an arbitrary number of gas species.
    The variable hard sphere collision model with Larsen-Borgnakke internal
    energy redistribution (see "Molecular Gas Dynamics and the Direct Simulation
    of Gas Flows" G.A. Bird, 1994) is available; other run-time selectable
    collision models can be easily added.

* Updated solvers
  + =mdFoam=
    Molecular Dynamics (MD) solver able to simulate a mixture of an arbitrary
    number of mono-atomic and small, rigid polyatomic (i.e. H2O, N2) molecular
    species, with 6 degree of freedom motion, in complex geometries. A molecule
    of any species can be built by specifying its sites of mass and charge. All
    molecules interact with short-range dispersion forces and pairwise
    electrostatic interactions using methods described in:
    Fennell and Gezelter, J. Chem. Phys. 124, 234104 (2006)

  + =mdEquilibrationFoam=
    Similar to mdFoam, but employs velocity scaling to adjust the simulation
    temperature to a target value. Useful to equilibrate a case before
    simulation.

* Function objects

*** *New* function objects:
    - =systemCall= - executes a list of system instructions
    - =fieldMinMax= - computes the min/max of a <field>
    - =staticPressure= - converts kinematic pressure to static pressure
    - =dsmcFields= - calculates intensive fields (velocity and temperature) from
      averaged extensive fields (i.e. momentum and energy)

*** Usage
    - Improved output control: =timeStep= or =outputTime=

* Boundary conditions
  - Improved set of direct mapped boundary conditions
  - Buoyancy boundary condition ---------------------------------------- [HENRY]

* *New* utilities
  - =particleTracks= - generate particle tracks for lagrangian calculations
  - =dsmcInitialise= - preprocessing utility to create initial configurations of
    DSMC particles in a geometry

*** *New* foamCalc functions
    - =interpolate= - performs fvc::interpolate(<field>)
    - =randomise= - randomises a <field> by a given perturbation
    - =addSubtract= - simple add/subtract field functionality
