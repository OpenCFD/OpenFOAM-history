/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 1991-2009 OpenCFD Ltd.
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Class
    Foam::processorCyclicFvPatch

Description
    Processor patch.

SourceFiles
    processorCyclicFvPatch.C

\*---------------------------------------------------------------------------*/

#ifndef processorCyclicFvPatch_H
#define processorCyclicFvPatch_H

//#include "coupledFvPatch.H"
//#include "processorLduInterface.H"
#include "processorCyclicPolyPatch.H"
#include "processorFvPatch.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                           Class processorCyclicFvPatch Declaration
\*---------------------------------------------------------------------------*/

class processorCyclicFvPatch
:
//    public coupledFvPatch,
//    public processorLduInterface
    public processorFvPatch
{
    // Private Data

        const processorCyclicPolyPatch& procPolyPatch_;


//protected:
//
//    // Protected Member functions
//
//        //- Make patch weighting factors
//        void makeWeights(scalarField&) const;
//
//        //- Make patch face - neighbour cell distances
//        void makeDeltaCoeffs(scalarField&) const;


public:

    //- Runtime type information
    TypeName(processorCyclicPolyPatch::typeName_());


    // Constructors

        //- Construct from components
        processorCyclicFvPatch(const polyPatch& patch, const fvBoundaryMesh& bm)
        :
//            coupledFvPatch(patch, bm),
            processorFvPatch(patch, bm),
            procPolyPatch_(refCast<const processorCyclicPolyPatch>(patch))
        {}


    // Member functions

//        //- Return processor number
//        int myProcNo() const
//        {
//            return procPolyPatch_.myProcNo();
//        }
//
//        //- Return neigbour processor number
//        int neighbProcNo() const
//        {
//            return procPolyPatch_.neighbProcNo();
//        }
//
//        //- Return true if running parallel
//        virtual bool coupled() const
//        {
//            if (Pstream::parRun())
//            {
//                return true;
//            }
//            else
//            {
//                return false;
//            }
//        }

        //- Return message tag used for sending
        virtual int tag() const
        {
            // Allocate from Pstream?
            return procPolyPatch_.tag();
        }

        const processorCyclicPolyPatch& procPolyPatch() const
        {
            return procPolyPatch_;
        }

//         //- Are the planes separated.
//         virtual bool separated() const
//         {
//             return procPolyPatch_.separated();
//         }
// 
//         //- If the planes are separated the separation vector.
//         virtual const vector& separation() const
//         {
//             return procPolyPatch_.separation();
//         }
// 

        //- Are the cyclic planes parallel
        virtual bool parallel() const
        {
            return procPolyPatch_.parallel();
        }

        //- Return face transformation tensor
        virtual const tensorField& forwardT() const
        {
            return procPolyPatch_.forwardT();
        }

        //- Return neighbour-cell transformation tensor
        virtual const tensorField& reverseT() const
        {
            return procPolyPatch_.reverseT();
        }

//        
//        //- Return delta (P to N) vectors across coupled patch
//        virtual tmp<vectorField> delta() const;


        // Interface transfer functions

//            //- Return the values of the given internal data adjacent to
//            //  the interface as a field
//            virtual tmp<labelField> interfaceInternalField
//            (
//                const unallocLabelList& internalData
//            ) const;

//             //- Initialise interface data transfer
//             virtual void initTransfer
//             (
//                 const Pstream::commsTypes commsType,
//                 const unallocLabelList& interfaceData
//             ) const;
// 
//             //- Transfer and return neighbour field
//             virtual tmp<labelField> transfer
//             (
//                 const Pstream::commsTypes commsType,
//                 const unallocLabelList& interfaceData
//             ) const;

//            //- Initialise neighbour field transfer
//            virtual void initInternalFieldTransfer
//            (
//                const Pstream::commsTypes commsType,
//                const unallocLabelList& internalData
//            ) const;
//
//            //- Return neighbour field
//            virtual tmp<labelField> internalFieldTransfer
//            (
//                const Pstream::commsTypes commsType,
//                const unallocLabelList& internalData
//            ) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
