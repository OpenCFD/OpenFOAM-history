/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 1991-2009 OpenCFD Ltd.
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Class
    cellPointWeight

Description

SourceFiles
    cellPointWeight.C
    findCellPointTet.H
    findCellPointTriangle.H

\*---------------------------------------------------------------------------*/

#ifndef cellPointWeight_H
#define cellPointWeight_H

#include "vector.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

class polyMesh;

/*---------------------------------------------------------------------------*\
                           Class cellPointWeight Declaration
\*---------------------------------------------------------------------------*/

class cellPointWeight
{
    // Private data

       vector position_;
       label cellNo_;
       label face_;
       FixedList<scalar, 4> weights_;
       FixedList<label, 3> faceVertices_;
       label cellFace_;

       
    // Private Member Functions

        bool findTet
        (
            const polyMesh& mesh,
            const label nFace,
            vector tetPoints[],
            label tetLabelCandidate[],
            scalar phiCandidate[],
            label& closestFace,
            scalar& minDistance
        );

        bool findTriangle
        (
            const polyMesh& mesh,
            const label nFace
        );


public:

    // Constructors

        //- Construct from components
        cellPointWeight
        (
            const polyMesh& mesh,
            const vector& position, 
            const label nCell,
            const label facei = -1
        );


    // Member Functions

        //- cell label
        inline label cell() const
        {
            return cellNo_;
        }

        //- face label
        inline label face() const
        {
            return face_;
        }
        
        //- interpolation weights
        inline const FixedList<scalar, 4>& weights() const
        {
            return weights_;
        }
        
        //- interpolation addressing for points on face
        inline const FixedList<label, 3>& faceVertices() const
        {
            return faceVertices_;
        }

        //- face label
        inline label cellFace() const
        {
            return cellFace_;
        }
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
