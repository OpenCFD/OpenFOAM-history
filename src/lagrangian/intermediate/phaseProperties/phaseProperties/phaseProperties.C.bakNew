/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 1991-2009 OpenCFD Ltd.
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

\*---------------------------------------------------------------------------*/

#include "phaseProperties.H"

// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //

template<>
const char* Foam::NamedEnum<Foam::phaseProperties::phaseType, 4>::names[] =
{
    "gas",
    "liquid",
    "solid",
    "unknown"
};


const Foam::NamedEnum<Foam::phaseProperties::phaseType, 4>
    Foam::phaseProperties::phaseTypeNames_;


// * * * * * * * * * * * * * Private Member Functions  * * * * * * * * * * * //

void Foam::phaseProperties::setGlobalGasIds
(
    const PtrList<volScalarField>& YGas
)
{
    forAll(components_, i)
    {
        forAll (YGas, j)
        {
            word specieName = YGas[j].name();

            if (specieName == components_[i].first())
            {
                globalIds_[i] = j;
                break;
            }
        }
        if (globalIds_[i] == -1)
        {
            wordList globalGasNames(YGas.size());

            forAll (YGas, k)
            {
                globalGasNames[k] = YGas[k].name();
            }

            FatalErrorIn
            (
                "void phaseProperties::setGlobalGasIds"
                "("
                "    const hCombustionThermo&"
                ")"
            )   << "Could not find gas species " << components_[i].first()
                << " in species list" <<  nl
                << "Available species are: " << nl << globalGasNames << nl
                << exit(FatalError);
        }
    }
}


void Foam::phaseProperties::setGlobalIds(const wordList& globalNames)
{
    forAll(components_, i)
    {
        forAll(globalNames, j)
        {
            if (globalNames[j] == components_[i].first())
            {
                globalIds_[i] = j;
                break;
            }
        }
        if (globalIds_[i] == -1)
        {
            FatalErrorIn
            (
                "void Foam::phaseProperties::setGlobalGasIds\n"
                "(\n"
                "    const PtrList<volScalarField>& YGas\n"
                ")"
            )   << "Could not find specie " << components_[i].first()
                << " in species list" <<  nl
                << "Available species are: " << nl << globalNames << nl
                << exit(FatalError);
        }
    }
}


void Foam::phaseProperties::checkTotalMassFraction() const
{
    scalar total = 0.0;
    forAll(fractions_, cmptI)
    {
        total += fractions_[cmptI];
    }

    if (mag(total - 1.0) > SMALL)
    {
        FatalErrorIn
        (
            "void Foam::phaseProperties::checkTotalMassFraction() const"
        )   << "Component fractions must total to unity" << nl
            << "Components: " << nl << components_ << nl << exit(FatalError);
    }
}


// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

Foam::phaseProperties::phaseProperties()
:
    phase_(UNKNOWN),
    names_(0),
    fractions_(0),
    globalIds_(0)
{}


Foam::phaseProperties::phaseProperties(Istream& is)
:
    phase_(UNKNOWN),
    names_(0),
    fractions_(0),
    globalIds_(0)
{
    is.check("Foam::phaseProperties::phaseProperties(Istream& is)");

    Tuple2<word, List<Tuple2<word, scalar> > > components(is);

    phase_ = phaseTypeNames_.read(components.first());

    label nComponents = components.second().size();
    names_.setSize(nComponents);
    fractions_.setSize(nComponents);

    forAll(components.second(), cmptI)
    {
        names_[cmptI] = components.second()[cmptI].first();
        fractions_[cmptI] = components.second()[cmptI].second();
    }

    // initialise global ids to -1
    globalIds_.setSize(nComponents, -1);

    checkTotalMassFraction();
}


Foam::phaseProperties::phaseProperties(const phaseProperties& pp)
:
    phase_(pp.phase_),
    names_(pp.names_),
    fractions_(pp.fractions_),
    globalIds_(pp.globalIds_)
{}


// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //

Foam::phaseProperties::~phaseProperties()
{}


// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //

void Foam::phaseProperties::initialiseGlobalIds
(
    const PtrList<volScalarField>& YGas,
    const wordList& liquidNames,
    const wordList& solidNames
)
{
    // determine the addressing to map between components listed in the phase
    // with those given in the (main) thermo properties
    switch (phase_)
    {
        case GAS:
        {
            setGlobalGasIds(YGas);
            break;
        }
        case LIQUID:
        {
            setGlobalIds(liquidNames);
            break;
        }
        case SOLID:
        {
            setGlobalIds(solidNames);
            break;
        }
        default:
        {
            FatalErrorIn
            (
                "Foam::phaseProperties::setGlobalIds\n"
                "(\n"
                "    const PtrList<specieReactingProperties>& gases,\n"
                "    const wordList& liquidNames,\n"
                "    const wordList& solidNames\n"
                ")"
            )   << "Invalid phase: " << phaseTypeNames_[phase_] << nl
                << "    phase must be gas, liquid or solid" << nl
                << exit(FatalError);
        }
}


Foam::phaseProperties::phaseType Foam::phaseProperties::phase() const
{
    return phase_;
}


Foam::word Foam::phaseProperties::phaseTypeName() const
{
    return phaseTypeNames_[phase_];
}


const Foam::List<Foam::Tuple2<Foam::word, Foam::scalar> >&
Foam::phaseProperties::components() const
{
    return components_;
}


const Foam::word& Foam::phaseProperties::name(const label cmptI) const
{
    if (cmptI >= components_.size())
    {
        FatalErrorIn
        (
            "const Foam::word& Foam::phaseProperties::name"
            "("
            "    const label cmptI"
            ") const"
        )   << "Requested component " << cmptI << "out of range" << nl
            << "Available phase components:" << nl << components_ << nl
            << exit(FatalError);
    }

    return components_[cmptI].first();
}


const Foam::wordList Foam::phaseProperties::names() const
{
    wordList cmptNames(components_.size());

    forAll(components_, cmptI)
    {
        cmptNames[cmptI] = components_[cmptI].first();
    }

    return cmptNames;
}


Foam::label Foam::phaseProperties::id(const word& cmptName) const
{
    forAll(components_, cmptI)
    {
        if (components_[cmptI].first() == cmptName)
        {
            return cmptI;
        }
    }

    return -1;
}


Foam::label Foam::phaseProperties::globalId(const word& cmptName) const
{
    label id = this->id(cmptName);

    if (id < 0)
    {
        return id;
    }
    else
    {
        return globalIds_[id];
    }

}


const Foam::labelList& Foam::phaseProperties::globalIds() const
{
    return globalIds_;
}


Foam::scalar& Foam::phaseProperties::Y(const label cmptI)
{
    if (cmptI >= components_.size())
    {
        FatalErrorIn
        (
            "const Foam::scalar& Foam::phaseProperties::Y"
            "("
            "    const label cmptI"
            ") const"
        )   << "Requested component " << cmptI << "out of range" << nl
            << "Available phase components:" << nl << components_ << nl
            << exit(FatalError);
    }

    return components_[cmptI].second();
}


const Foam::scalarList Foam::phaseProperties::Y() const
{
    scalarList cmptYs(components_.size(), 0.0);

    forAll(cmptYs, i)
    {
        cmptYs[i] = components_[i].second();
    }

    return cmptYs;
}


// ************************************************************************* //

