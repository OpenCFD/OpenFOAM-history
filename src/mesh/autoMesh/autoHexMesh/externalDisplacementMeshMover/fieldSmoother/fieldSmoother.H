/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2014 OpenCFD Ltd.
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::fieldSmoother

Description

SourceFiles
    fieldSmoother.C

\*---------------------------------------------------------------------------*/

#ifndef fieldSmoother_H
#define fieldSmoother_H

#include "meshRefinement.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                         Class fieldSmoother Declaration
\*---------------------------------------------------------------------------*/

class fieldSmoother
{
    // Private data

        //- Reference to the poly mesh
        const polyMesh& mesh_;


    // Private Member Functions

        //- Disallow default bitwise copy construct
        fieldSmoother(const fieldSmoother&);

        //- Disallow default bitwise assignment
        void operator=(const fieldSmoother&);


public:

    // Run-time type information
    TypeName("fieldSmoother");


    // Constructors

        //- Construct from a polyMesh
        fieldSmoother(const polyMesh&);


    //- Destructor
    virtual ~fieldSmoother();


    // Member Functions

        //- Smooth interior normals
        void smoothNormals
        (
            const label nIter,
            const PackedBoolList& isMeshMasterPoint,
            const PackedBoolList& isMeshMasterEdge,
            const labelList& fixedPoints,
            pointVectorField& normals
        ) const;

        //- Smooth patch normals
        void smoothPatchNormals
        (
            const label nIter,
            const PackedBoolList& isPatchMasterPoint,
            const PackedBoolList& isPatchMasterEdge,
            const indirectPrimitivePatch& adaptPatch,
            pointField& normals
        ) const;

        //- Smooth a scalar field towards, but not beyond, a minimum value
        void minSmoothField
        (
            const label nIter,
            const PackedBoolList& isPatchMasterPoint,
            const PackedBoolList& isPatchMasterEdge,
            const indirectPrimitivePatch& adaptPatch,
            const scalarField& fieldMin,
            scalarField& field
        ) const;

        //- Smooth and then un-smooth a displacement
        void smoothLambdaMuDisplacement
        (
            const label nIter,
            const PackedBoolList& isMeshMasterPoint,
            const PackedBoolList& isMeshMasterEdge,
            const PackedBoolList& isSmoothable,
            vectorField& displacement
        ) const;
};

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
