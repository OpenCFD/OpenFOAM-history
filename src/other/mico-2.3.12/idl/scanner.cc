#line 2 "scanner.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
#include <unistd.h>
#endif
#endif
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 114
#define YY_END_OF_BUFFER 115
static yyconst short int yy_accept[472] =
    {   0,
        0,    0,  115,  113,    1,    2,  113,  113,   22,   26,
      113,   10,   11,   20,   18,   13,   19,  113,   21,  107,
      106,   12,   14,   27,   15,   28,   95,   95,   95,   95,
       95,   95,    8,    9,   25,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,    6,   24,    7,   23,    0,
      111,    0,    0,    5,    0,    0,    0,  100,    3,   99,
      107,    0,  102,    0,  108,  106,   70,   17,   16,   95,
       95,    0,    0,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   52,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,    0,    0,    0,  109,    0,    0,  104,    0,
        3,   98,  103,    0,    0,   97,  108,   95,    0,  112,
        0,    0,    0,   95,   95,   95,   95,   73,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   53,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,    0,
        0,    0,    0,    0,    0,  101,  105,    0,   96,   95,
        0,    0,    0,  110,    0,    0,    0,   95,   45,   95,
       95,   95,   95,   49,   34,   95,   95,   95,   95,   95,
       95,   95,   51,   95,   95,   95,   95,   95,   95,   95,
       90,   95,   95,   95,   95,   42,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   85,
       95,   40,   95,   95,    0,    0,    0,    0,   44,    0,
        0,    0,    0,    0,    0,   95,   95,   95,   95,   95,

       95,   30,   95,   95,   95,   95,   95,   87,   95,   95,
       95,   95,   36,   32,   95,   95,   79,   95,   69,   95,
       95,   95,   95,   72,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   43,   95,   95,   95,   95,   95,   95,
       95,   95,   47,   95,   95,   35,   95,    0,    0,    0,
        0,    0,    0,   82,   95,   95,   95,   95,   95,   95,
       95,   59,   95,   33,   95,   95,   95,   93,   95,   29,
       95,   95,   71,   95,   63,   78,   95,   95,   95,   60,
       95,   80,   95,   95,   95,   38,   46,   95,   48,   95,
       65,   95,   95,   95,   95,   95,    0,    0,    0,   95,

       95,   95,   37,   95,   95,   81,   50,   95,   95,   62,
       95,   95,   91,   95,   95,   61,   95,   95,   95,   95,
       95,   95,   95,   95,   31,   95,   95,   39,    0,    4,
        0,    0,   95,   55,   95,   95,   89,   95,   95,   95,
       95,   86,   95,   84,   95,   75,   74,   95,   58,   95,
       95,   41,   95,   64,   76,   83,   94,   77,   67,   54,
       95,   88,   68,   95,   95,   56,   92,   95,   66,   57,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   33,   34,   33,   35,   36,   33,   33,   37,   38,
       33,   39,   40,   41,   42,   43,   33,   44,   33,   33,
       45,   46,   47,   48,   33,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   33,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   33,   73,   74,   75,   76,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[77] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    5,    1,
        1,    1,    1,    1,    1,    1,    1,    6,    6,    7,
        1,    1,    1,    1,    1,    4,    7,    7,    7,    7,
        7,    7,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    9,    8,   10,    1,    4,    1,    1,    6,    6,
        7,    7,    7,    6,    8,    8,    8,    8,    8,    8,
       10,    8,    8,    8,   10,    8,   10,    9,   10,    8,
       10,    8,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[496] =
    {   0,
        0,    0,  793,  794,  794,  794,   72,   75,  794,  794,
      746,  794,  794,  794,  794,  794,  794,   61,  774,   68,
       73,  769,  794,  766,  794,  763,    0,  760,   85,  736,
      746,  735,  794,  794,  794,   35,  721,   51,   44,   62,
       52,  729,  719,   22,  718,   46,  730,   66,   64,   75,
       84,   70,   44,   81,   90,  794,  794,  794,  794,  111,
      794,  126,  775,  794,  112,  768,  128,  130,    0,  148,
      155,  172,  794,  191,    0,  196,  794,  794,  794,    0,
      740,  148,  729,  716,  731,  713,  705,  698,  702,  706,
      701,  717,   98,  699,  710,  695,  705,  693,  707,  708,

      707,   94,  695,  689,  695,  691,  102,  144,  692,  700,
      692,  683,  682,  695,  680,  119,  696,  688,  695,  120,
      681,  677,  678,  683,  671,  675,  123,  684,  677,  678,
      678,  666,  212,    0,  190,  794,  204,    0,  794,  222,
        0,  214,  794,  237,  200,  241,    0,  692,  216,  794,
      228,  722,  235,  677,  698,  660,  660,    0,  661,  666,
      671,  658,  659,   96,  654,  671,  669,  651,  657,  655,
      662,  647,  661,  659,  662,  671,  656,  646,  639,  653,
      656,  649,  654,  634,  634,  643,  646,  628,    0,  169,
      628,  637,  629,  642,  625,  653,  626,  206,  627,  622,

      627,  634,  624,  628,  618,  615,  630,  632,  615,  246,
      302,  225,  264,  670,  266,  269,  794,  275,  282,  647,
      292,    0,    0,  794,  272,    0,    0,  626,    0,  623,
      610,  617,  620,    0,    0,  610,  201,  618,  608,  601,
      609,  601,    0,  599,  602,  602,  610,  610,  594,  611,
        0,  594,  591,  592,  597,    0,  600,  595,  596,  583,
      584,  601,  565,  564,  550,  549,  540,  529,  537,  532,
      513,  508,  514,  502,  512,  507,  271,  496,  501,    0,
      489,    0,  475,  482,  266,  270,  275,  511,    0,  299,
      352,  389,  306,  510,  502,  443,  481,  459,  457,  457,

      444,    0,  444,  432,  442,  442,  447,    0,  432,  431,
      432,  431,    0,    0,  432,  421,    0,  433,    0,  433,
      432,  421,  421,    0,  401,  407,  404,  418,  247,  403,
      407,  406,  409,    0,  410,  397,  398,  406,  412,  408,
      394,  399,    0,  390,  383,    0,  388,  311,  303,  426,
      321,  439,  438,    0,  388,  385,  367,  373,  380,  379,
      364,    0,  363,    0,  357,  371,  355,    0,  360,    0,
      376,  358,    0,  364,    0,    0,  350,  362,  361,    0,
      357,    0,  353,  360,  344,    0,    0,  333,    0,  332,
        0,  344,  342,  342,  322,  338,  389,  463,  382,  324,

      322,  321,    0,  326,  320,    0,    0,  322,  316,    0,
      324,  325,    0,  322,  339,    0,  307,  316,  294,  312,
      311,  297,  313,  307,    0,  307,  295,    0,  347,  794,
      322,  338,  293,    0,  291,  276,    0,  289,  280,  274,
      286,    0,  284,    0,  270,    0,    0,  262,    0,  269,
      219,    0,  190,    0,    0,    0,    0,    0,    0,    0,
      164,    0,    0,  139,  125,    0,    0,   83,    0,    0,
      794,  517,  527,  537,  542,  549,  556,  566,  571,  578,
      588,  593,  595,  599,  606,  612,  614,  616,  618,  620,
      623,  626,  629,  636,  642

    } ;

static yyconst short int yy_def[496] =
    {   0,
      471,    1,  471,  471,  471,  471,  472,  473,  471,  471,
      474,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  475,  475,  475,  475,
      475,  475,  471,  471,  471,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  471,  471,  471,  471,  472,
      471,  476,  473,  471,  473,  471,  477,  471,  478,  471,
      471,  471,  471,  471,  479,  471,  471,  471,  471,  475,
      475,  480,  481,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  472,  482,  473,  471,  471,  483,  471,  471,
      478,  471,  471,  471,  471,  471,  479,  475,  480,  471,
      484,  471,  485,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  475,  475,  475,  472,
      472,  473,  471,  486,  471,  471,  471,  471,  471,  475,
      480,  487,  488,  471,  471,  489,  490,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  472,  472,  473,  471,  475,  480,
      480,  291,  471,  491,  492,  475,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  473,  480,  291,
      480,  493,  471,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  494,  291,  495,  475,

      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  494,  471,
      480,  471,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
        0,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471

    } ;

static yyconst short int yy_nxt[871] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       22,   23,   24,   25,   26,    4,   27,   27,   27,   27,
       27,   28,   27,   27,   27,   29,   30,   27,   27,   27,
       31,   27,   32,   27,   33,    4,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   27,   45,   46,
       47,   48,   49,   27,   50,   51,   52,   53,   54,   55,
       27,   27,   56,   57,   58,   59,   61,   64,   68,   68,
       68,  106,  107,   70,   87,   71,   71,   72,   70,   82,
       76,   76,   76,   83,  109,   88,   95,   73,   74,   91,

      101,   89,   73,   74,  127,   96,   92,  110,  102,  128,
      103,   75,   93,  111,   64,   61,  113,   62,   94,   73,
       74,   97,   98,  118,   73,   74,  114,  119,  116,  129,
       99,  117,  100,  115,  125,  470,  120,   65,   75,  121,
      131,  126,  130,  133,  133,  137,  137,   68,   68,   68,
      122,  123,  150,  124,  173,  132,   62,  163,  164,  139,
      140,  237,  238,  179,  174,  142,  142,  142,  180,  134,
       70,  138,   71,   71,   72,  190,  135,  143,  144,  203,
      191,  139,  140,  195,   73,   74,  196,   70,  204,   72,
       72,   72,   64,  151,  181,  469,  134,  468,  138,  143,

      144,   73,   74,  145,  182,  145,   73,   74,  146,  146,
      146,   70,  136,   76,   76,   76,   61,  146,  146,  146,
      150,  213,  213,   73,   74,   73,   74,   64,  263,  210,
      210,  142,  142,  142,  215,  467,  215,  264,  212,  216,
      216,  216,  466,  217,  144,  221,  221,   73,   74,  218,
       61,  218,  225,  225,  219,  219,  219,   62,  146,  146,
      146,  151,  272,  285,  285,  217,  144,  302,  303,  222,
       61,  223,  136,  273,   61,  465,  226,   64,  227,  287,
      224,   66,   66,  216,  216,  216,  216,  216,  216,  293,
      293,   62,  219,  219,  219,  222,  150,  380,  223,  219,

      219,  219,  226,  150,  340,  227,   61,  150,  341,  290,
      290,   62,  381,   64,  224,   62,  349,  349,  464,  286,
      286,  286,  342,  152,  152,  150,  150,  463,  286,  286,
      286,  286,  286,  286,  348,  462,  461,  151,  460,  459,
      458,  457,  456,  455,  151,  454,  224,   62,  151,  430,
      286,  286,  286,  286,  286,  286,  150,  453,  452,  397,
      451,  450,  449,  448,  447,  446,  151,  151,  445,  350,
      350,  350,  444,  443,  442,  441,  440,  439,  350,  350,
      350,  350,  350,  350,  438,  437,  436,  435,  434,  433,
      224,  430,  428,  427,  426,  425,  424,  151,  423,  422,

      350,  350,  350,  350,  350,  350,  351,  351,  351,  421,
      420,  419,  418,  417,  416,  351,  351,  351,  351,  351,
      351,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  351,  351,  351,
      351,  351,  351,  398,  398,  398,  224,  224,  396,  395,
      394,  393,  398,  398,  398,  398,  398,  398,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  379,
      378,  377,  376,  375,  398,  398,  398,  398,  398,  398,
      431,  431,  431,  374,  373,  372,  371,  370,  369,  431,
      431,  431,  431,  431,  431,  368,  367,  366,  365,  364,

      363,  362,  361,  360,  359,  358,  357,  356,  355,  354,
      224,  431,  431,  431,  431,  431,  431,   60,  224,  136,
       60,   60,   60,   60,   60,   60,   60,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   66,  347,  346,
       66,  345,   66,   66,   66,   66,   66,   80,   80,   80,
       80,   80,   60,   60,   60,  344,  343,  339,   60,   66,
       66,   66,  338,  337,  336,   66,  141,  141,  335,  141,
      141,  141,  141,  141,  141,  141,  147,  147,  149,  334,
      333,  149,  149,  149,  149,  149,  149,  149,  152,  332,
      331,  152,  330,  152,  152,  152,  152,  152,  211,  211,

      214,  214,  149,  149,  149,  329,  328,  149,  149,  152,
      152,  152,  327,  326,  152,  152,  288,  288,  288,  291,
      291,  292,  292,  294,  294,  295,  295,  352,  352,  352,
      353,  353,  353,  399,  399,  399,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  432,  432,  432,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  301,  300,  299,  298,  297,  296,  289,  136,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,
      271,  270,  269,  268,  267,  266,  265,  262,  261,  260,

      259,  258,  257,  256,  255,  254,  253,  252,  251,  250,
      249,  248,  247,  246,  245,  244,  243,  242,  241,  240,
      239,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      224,  220,  209,  208,  207,  206,  205,  202,  201,  200,
      199,  198,  197,  194,  193,  192,  189,  188,  187,  186,
      185,  184,  183,  178,  177,  176,  175,  172,  171,  170,
      169,  168,  167,  166,  165,  162,  161,  160,  159,  158,
      157,  156,  155,  154,  153,  148,  136,   64,  112,  108,
      105,  104,   90,   86,   85,   84,   81,   79,   78,   77,
       69,   67,  471,    3,  471,  471,  471,  471,  471,  471,

      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471
    } ;

static yyconst short int yy_chk[871] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    7,    8,   18,   18,
       18,   44,   44,   20,   36,   20,   20,   20,   21,   29,
       21,   21,   21,   29,   46,   36,   39,   20,   20,   38,

       41,   36,   21,   21,   53,   39,   38,   46,   41,   53,
       41,   20,   38,   46,   65,   60,   48,    7,   38,   20,
       20,   40,   40,   50,   21,   21,   48,   50,   49,   54,
       40,   49,   40,   48,   52,  468,   51,    8,   20,   51,
       55,   52,   54,   62,   62,   67,   67,   68,   68,   68,
       51,   51,   82,   51,  102,   55,   60,   93,   93,   68,
       68,  164,  164,  107,  102,   70,   70,   70,  107,   62,
       71,   67,   71,   71,   71,  116,   65,   70,   70,  127,
      116,   68,   68,  120,   71,   71,  120,   72,  127,   72,
       72,   72,  135,   82,  108,  465,   62,  464,   67,   70,

       70,   72,   72,   74,  108,   74,   71,   71,   74,   74,
       74,   76,  137,   76,   76,   76,  133,  145,  145,  145,
      149,  137,  137,   72,   72,   76,   76,  212,  190,  133,
      133,  142,  142,  142,  140,  461,  140,  190,  135,  140,
      140,  140,  453,  142,  142,  151,  151,   76,   76,  144,
      210,  144,  153,  153,  144,  144,  144,  133,  146,  146,
      146,  149,  198,  210,  210,  142,  142,  237,  237,  151,
      285,  151,  213,  198,  286,  451,  153,  287,  153,  212,
      225,  213,  213,  215,  215,  215,  216,  216,  216,  225,
      225,  210,  218,  218,  218,  151,  221,  329,  151,  219,

      219,  219,  153,  290,  277,  153,  211,  349,  277,  221,
      221,  285,  329,  348,  293,  286,  290,  290,  450,  211,
      211,  211,  277,  293,  293,  351,  431,  448,  211,  211,
      211,  211,  211,  211,  287,  445,  443,  221,  441,  440,
      439,  438,  436,  435,  290,  433,  432,  211,  349,  429,
      211,  211,  211,  211,  211,  211,  291,  427,  426,  348,
      424,  423,  422,  421,  420,  419,  351,  431,  418,  291,
      291,  291,  417,  415,  414,  412,  411,  409,  291,  291,
      291,  291,  291,  291,  408,  405,  404,  402,  401,  400,
      399,  397,  396,  395,  394,  393,  392,  291,  390,  388,

      291,  291,  291,  291,  291,  291,  292,  292,  292,  385,
      384,  383,  381,  379,  378,  292,  292,  292,  292,  292,
      292,  377,  374,  372,  371,  369,  367,  366,  365,  363,
      361,  360,  359,  358,  357,  356,  355,  292,  292,  292,
      292,  292,  292,  350,  350,  350,  353,  352,  347,  345,
      344,  342,  350,  350,  350,  350,  350,  350,  341,  340,
      339,  338,  337,  336,  335,  333,  332,  331,  330,  328,
      327,  326,  325,  323,  350,  350,  350,  350,  350,  350,
      398,  398,  398,  322,  321,  320,  318,  316,  315,  398,
      398,  398,  398,  398,  398,  312,  311,  310,  309,  307,

      306,  305,  304,  303,  301,  300,  299,  298,  297,  296,
      295,  398,  398,  398,  398,  398,  398,  472,  294,  288,
      472,  472,  472,  472,  472,  472,  472,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  474,  284,  283,
      474,  281,  474,  474,  474,  474,  474,  475,  475,  475,
      475,  475,  476,  476,  476,  279,  278,  276,  476,  477,
      477,  477,  275,  274,  273,  477,  478,  478,  272,  478,
      478,  478,  478,  478,  478,  478,  479,  479,  480,  271,
      270,  480,  480,  480,  480,  480,  480,  480,  481,  269,
      268,  481,  267,  481,  481,  481,  481,  481,  482,  482,

      483,  483,  484,  484,  484,  266,  265,  484,  484,  485,
      485,  485,  264,  263,  485,  485,  486,  486,  486,  487,
      487,  488,  488,  489,  489,  490,  490,  491,  491,  491,
      492,  492,  492,  493,  493,  493,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  495,  495,  495,  262,
      261,  260,  259,  258,  257,  255,  254,  253,  252,  250,
      249,  248,  247,  246,  245,  244,  242,  241,  240,  239,
      238,  236,  233,  232,  231,  230,  228,  220,  214,  209,
      208,  207,  206,  205,  204,  203,  202,  201,  200,  199,
      197,  196,  195,  194,  193,  192,  191,  188,  187,  186,

      185,  184,  183,  182,  181,  180,  179,  178,  177,  176,
      175,  174,  173,  172,  171,  170,  169,  168,  167,  166,
      165,  163,  162,  161,  160,  159,  157,  156,  155,  154,
      152,  148,  132,  131,  130,  129,  128,  126,  125,  124,
      123,  122,  121,  119,  118,  117,  115,  114,  113,  112,
      111,  110,  109,  106,  105,  104,  103,  101,  100,   99,
       98,   97,   96,   95,   94,   92,   91,   90,   89,   88,
       87,   86,   85,   84,   83,   81,   66,   63,   47,   45,
       43,   42,   37,   32,   31,   30,   28,   26,   24,   22,
       19,   11,    3,  471,  471,  471,  471,  471,  471,  471,

      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.ll"
#define INITIAL 0
/*
 *  MICO --- an Open Source CORBA implementation
 *  Copyright (c) 1997-2001 by The Mico Team
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *  For more information, visit the MICO Home Page at
 *  http://www.mico.org/
 */
#line 24 "scanner.ll"

#include <CORBA.h>

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

#include "prepro.h"
#include "parsenode.h"
#include "yacc.h"
#include <mico/template_impl.h>


#if defined(_WIN32) && defined(_MSC_VER)
#define isatty _isatty
#endif


using namespace std;

static CORBA::ULongLong
ascii_to_longlong( unsigned long base, const char *s )
{
  CORBA::ULongLong ll = 0;
  while( *s != '\0' ) {
    char c = *s++;
    if( c >= 'a' )
      c -= 'a' - 'A';
    c -= '0';
    if( c > 9 )
      c -= 'A' - '0' - 10;
    ll = ll * base + c;
  }
  return ll;
}

static CORBA::LongDouble
ascii_to_longdouble (const char *s)
{
  CORBA::LongDouble d;
#ifdef HAVE_SCANF_LF
  sscanf ((char *)s, "%Lf", &d);
#else
  /*
   * this is only an approximation and will probably break fixed<>
   * parameter calculation on systems where
   * sizeof(double) < sizeof(long double). but fortunately all
   * systems where scanf("%Lf") is known to be broken (Linux/Alpha
   * and HPUX) have sizeof(double) == sizeof(long double).
   */
  d = strtod ((char *)s, NULL);
#endif
  return d;
}

static char
translate_char( const char * & s )
{
  char c = *s++;
  
  if( c != '\\' )
    return c;

  c = *s++;

  switch( c ) {
  case 'n':
    return '\n';
  case 't':
    return '\t';
  case 'v':
    return '\v';
  case 'b':
    return '\b';
  case 'r':
    return '\r';
  case 'f':
    return '\f';
  case 'a':
    return '\a';
  case '\\':
    return '\\';
  case '?':
    return '\?';
  case '\'':
    return '\'';
  case '"':
    return '"';
  case 'x':
  case 'X':
    if (*s >= '0' && *s <= '9') {
      c = *s++ - '0';
    }
    else if (*s >= 'a' && *s <= 'f') {
      c = *s++ - 'a' + 10;
    }
    else if (*s >= 'A' && *s <= 'F') {
      c = *s++ - 'A' + 10;
    }
    else {
      return c;
    }

    if (*s >= '0' && *s <= '9') {
      c = 16*c + *s++ - '0';
    }
    else if (*s >= 'a' && *s <= 'f') {
      c = 16*c + *s++ - 'a' + 10;
    }
    else if (*s >= 'A' && *s <= 'F') {
      c = 16*c + *s++ - 'A' + 10;
    }

    return c;

  case '0': case '1': case '2': case '3': case '4':
  case '5': case '6': case '7':
    c = c - '0';

    if (*s >= '0' && *s <= '7') {
      c = 8*c + *s++ - '0';
    }

    if (*s >= '0' && *s <= '7') {
      c = 8*c + *s++ - '0';
    }

    return c;

  default:
    return c;
  }
}

static CORBA::WChar
translate_wchar( const char * & s )
{
  CORBA::WChar res;
  char c = *s++;
  
  if( c != '\\' )
    return (CORBA::WChar) c;

  c = *s++;

  switch( c ) {
  case 'n':
    return (CORBA::WChar) '\n';
  case 't':
    return (CORBA::WChar) '\t';
  case 'v':
    return (CORBA::WChar) '\v';
  case 'b':
    return (CORBA::WChar) '\b';
  case 'r':
    return (CORBA::WChar) '\r';
  case 'f':
    return (CORBA::WChar) '\f';
  case 'a':
    return (CORBA::WChar) '\a';
  case '\\':
    return (CORBA::WChar) '\\';
  case '?':
    return (CORBA::WChar) '\?';
  case '\'':
    return (CORBA::WChar) '\'';
  case '"':
    return (CORBA::WChar) '"';
  case 'x':
  case 'X':
    if (*s >= '0' && *s <= '9') {
      res = *s++ - '0';
    }
    else if (*s >= 'a' && *s <= 'f') {
      res = *s++ - 'a' + 10;
    }
    else if (*s >= 'A' && *s <= 'F') {
      res = *s++ - 'A' + 10;
    }
    else {
      return (CORBA::WChar) c;
    }

    if (*s >= '0' && *s <= '9') {
      res = 16*res + *s++ - '0';
    }
    else if (*s >= 'a' && *s <= 'f') {
      res = 16*res + *s++ - 'a' + 10;
    }
    else if (*s >= 'A' && *s <= 'F') {
      res = 16*res + *s++ - 'A' + 10;
    }

    return res;

  case '0': case '1': case '2': case '3': case '4':
  case '5': case '6': case '7':
    res = c - '0';

    if (*s >= '0' && *s <= '7') {
      res = 8*res + *s++ - '0';
    }

    if (*s >= '0' && *s <= '7') {
      res = 8*res + *s++ - '0';
    }

    return res;

  case 'u':
    if (*s >= '0' && *s <= '9') {
      res = *s++ - '0';
    }
    else if (*s >= 'a' && *s <= 'f') {
      res = *s++ - 'a' + 10;
    }
    else if (*s >= 'A' && *s <= 'F') {
      res = *s++ - 'A' + 10;
    }
    else {
      return (CORBA::WChar) c;
    }

    if (*s >= '0' && *s <= '9') {
      res = 16*res + *s++ - '0';
    }
    else if (*s >= 'a' && *s <= 'f') {
      res = 16*res + *s++ - 'a' + 10;
    }
    else if (*s >= 'A' && *s <= 'F') {
      res = 16*res + *s++ - 'A' + 10;
    }

    if (*s >= '0' && *s <= '9') {
      res = 16*res + *s++ - '0';
    }
    else if (*s >= 'a' && *s <= 'f') {
      res = 16*res + *s++ - 'a' + 10;
    }
    else if (*s >= 'A' && *s <= 'F') {
      res = 16*res + *s++ - 'A' + 10;
    }

    if (*s >= '0' && *s <= '9') {
      res = 16*res + *s++ - '0';
    }
    else if (*s >= 'a' && *s <= 'f') {
      res = 16*res + *s++ - 'a' + 10;
    }
    else if (*s >= 'A' && *s <= 'F') {
      res = 16*res + *s++ - 'A' + 10;
    }

    return res;

  default:
    return (CORBA::WChar) c;
  }
}

static char *
translate_string (const char * s)
{
  char *res, *tmp;
  CORBA::ULong i=0;

  res = tmp = CORBA::string_alloc (strlen (s));

  while (*s) {
    *tmp++ = translate_char (s);
    i++;
  }

  *tmp = '\0';
  return res;
}

static CORBA::WChar *
translate_wstring (const char * s)
{
  CORBA::WChar *res, *tmp;
  CORBA::ULong i=0;

  res = tmp = CORBA::wstring_alloc (strlen (s));

  while (*s) {
    *tmp++ = translate_wchar (s);
    i++;
  }

  *tmp = '\0';
  return res;
}

/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
#line 1048 "scanner.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 360 "scanner.ll"


#line 1213 "scanner.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 472 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 471 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 362 "scanner.ll"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 363 "scanner.ll"
idl_line_no++;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 364 "scanner.ll"
;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 365 "scanner.ll"
{
			  yylval._str = CORBA::string_dup( yytext );
                          idl_line_no++;
                          return T_PRAGMA;
                        }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 370 "scanner.ll"
{
                          preprocessor_directive( yytext );
			  yylval._str = CORBA::string_dup( yytext );
                          return T_INCLUDE;
                        }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 375 "scanner.ll"
return T_LEFT_CURLY_BRACKET;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 376 "scanner.ll"
return T_RIGHT_CURLY_BRACKET;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 377 "scanner.ll"
return T_LEFT_SQUARE_BRACKET;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 378 "scanner.ll"
return T_RIGHT_SQUARE_BRACKET;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 379 "scanner.ll"
return T_LEFT_PARANTHESIS;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 380 "scanner.ll"
return T_RIGHT_PARANTHESIS;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 381 "scanner.ll"
return T_COLON;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 382 "scanner.ll"
return T_COMMA;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 383 "scanner.ll"
return T_SEMICOLON;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 384 "scanner.ll"
return T_EQUAL;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 385 "scanner.ll"
return T_SHIFTRIGHT;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 386 "scanner.ll"
return T_SHIFTLEFT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 387 "scanner.ll"
return T_PLUS_SIGN;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 388 "scanner.ll"
return T_MINUS_SIGN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 389 "scanner.ll"
return T_ASTERISK;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 390 "scanner.ll"
return T_SOLIDUS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 391 "scanner.ll"
return T_PERCENT_SIGN;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 392 "scanner.ll"
return T_TILDE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 393 "scanner.ll"
return T_VERTICAL_LINE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 394 "scanner.ll"
return T_CIRCUMFLEX;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 395 "scanner.ll"
return T_AMPERSAND;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 396 "scanner.ll"
return T_LESS_THAN_SIGN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 397 "scanner.ll"
return T_GREATER_THAN_SIGN;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 399 "scanner.ll"
return T_IMPORT;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 400 "scanner.ll"
return T_CONST;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 401 "scanner.ll"
return T_TYPEDEF;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 402 "scanner.ll"
return T_FLOAT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 403 "scanner.ll"
return T_DOUBLE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 404 "scanner.ll"
return T_CHAR;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 405 "scanner.ll"
return T_WCHAR;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 406 "scanner.ll"
return T_FIXED;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 407 "scanner.ll"
return T_BOOLEAN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 408 "scanner.ll"
return T_STRING;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 409 "scanner.ll"
return T_WSTRING;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 410 "scanner.ll"
return T_VOID;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 411 "scanner.ll"
return T_UNSIGNED;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 412 "scanner.ll"
return T_LONG;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 413 "scanner.ll"
return T_SHORT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 414 "scanner.ll"
return T_FALSE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 415 "scanner.ll"
return T_TRUE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 416 "scanner.ll"
return T_STRUCT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 417 "scanner.ll"
return T_UNION;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 418 "scanner.ll"
return T_SWITCH;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 419 "scanner.ll"
return T_CASE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 420 "scanner.ll"
return T_DEFAULT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 421 "scanner.ll"
return T_ENUM;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 422 "scanner.ll"
return T_IN;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 423 "scanner.ll"
return T_OUT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 424 "scanner.ll"
return T_INTERFACE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 425 "scanner.ll"
return T_ABSTRACT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 426 "scanner.ll"
return T_VALUETYPE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 427 "scanner.ll"
return T_TRUNCATABLE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 428 "scanner.ll"
return T_SUPPORTS;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 429 "scanner.ll"
return T_CUSTOM;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 430 "scanner.ll"
return T_PUBLIC;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 431 "scanner.ll"
return T_PRIVATE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 432 "scanner.ll"
return T_FACTORY;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 433 "scanner.ll"
return T_NATIVE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 434 "scanner.ll"
return T_VALUEBASE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 435 "scanner.ll"
return T_TYPEID;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 436 "scanner.ll"
return T_TYPEPREFIX;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 437 "scanner.ll"
return T_GETRAISES;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 438 "scanner.ll"
return T_SETRAISES;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 439 "scanner.ll"
return T_LOCAL;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 441 "scanner.ll"
return T_SCOPE; 
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 443 "scanner.ll"
return T_MODULE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 444 "scanner.ll"
return T_OCTET;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 445 "scanner.ll"
return T_ANY;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 446 "scanner.ll"
return T_SEQUENCE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 447 "scanner.ll"
return T_READONLY;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 448 "scanner.ll"
return T_ATTRIBUTE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 449 "scanner.ll"
return T_EXCEPTION;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 450 "scanner.ll"
return T_ONEWAY;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 451 "scanner.ll"
return T_INOUT;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 452 "scanner.ll"
return T_RAISES;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 453 "scanner.ll"
return T_CONTEXT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 455 "scanner.ll"
return T_OBJECT;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 457 "scanner.ll"
return T_COMPONENT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 458 "scanner.ll"
return T_PROVIDES;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 459 "scanner.ll"
return T_USES;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 460 "scanner.ll"
return T_MULTIPLE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 461 "scanner.ll"
return T_EMITS;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 462 "scanner.ll"
return T_PUBLISHES;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 463 "scanner.ll"
return T_CONSUMES;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 464 "scanner.ll"
return T_HOME;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 465 "scanner.ll"
return T_MANAGES;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 466 "scanner.ll"
return T_PRIMARYKEY;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 467 "scanner.ll"
return T_FINDER;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 468 "scanner.ll"
return T_EVENTTYPE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 470 "scanner.ll"
{
                          // kcg: we will get rid of possible
                          // leading underscore
                          // in ParseNote::setIdent method
			  yylval.ident = CORBA::string_dup(yytext);
			  return T_IDENTIFIER;
			}
	YY_BREAK
case 96:
#line 478 "scanner.ll"
case 97:
#line 479 "scanner.ll"
case 98:
#line 480 "scanner.ll"
case 99:
#line 481 "scanner.ll"
case 100:
#line 482 "scanner.ll"
case 101:
YY_RULE_SETUP
#line 482 "scanner.ll"
{
			  yylval._float = ascii_to_longdouble( yytext );
			  return T_FLOATING_PT_LITERAL;
			}
	YY_BREAK
case 102:
#line 487 "scanner.ll"
case 103:
#line 488 "scanner.ll"
case 104:
#line 489 "scanner.ll"
case 105:
YY_RULE_SETUP
#line 489 "scanner.ll"
{
                          string s = yytext;
                          s = s.substr( 0, s.length() - 1 );
			  yylval._fixed = ascii_to_longdouble (s.c_str());
			  return T_FIXED_PT_LITERAL;
			}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 495 "scanner.ll"
{ 
			  yylval._int = ascii_to_longlong( 10, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 499 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 8, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 503 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 16, yytext + 2 );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 507 "scanner.ll"
{
                          string s( yytext );
                          s = s.substr( 1, s.length() - 2 );
			  const char * tmp = s.c_str ();
			  yylval._char = translate_char( tmp );
			  return T_CHARACTER_LITERAL;
			}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 514 "scanner.ll"
{
                          string s( yytext );
                          s = s.substr( 2, s.length() - 3 );
			  const char * tmp = s.c_str ();
			  yylval._wchar = translate_wchar (tmp);
			  return T_WCHARACTER_LITERAL;
			}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 521 "scanner.ll"
{
                          string s( yytext );
                          s = s.substr( 1, s.length() - 2 );
			  yylval._str = translate_string (s.c_str());
			  return T_STRING_LITERAL;
			}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 527 "scanner.ll"
{
                          string s( yytext );
                          s = s.substr( 2, s.length() - 3 );
			  yylval._wstr = translate_wstring (s.c_str());
			  return T_WSTRING_LITERAL;
			}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 533 "scanner.ll"
{
                          return T_UNKNOWN;
                        }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 537 "scanner.ll"
ECHO;
	YY_BREAK
#line 1893 "scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 472 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 472 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 471);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
#include <unistd.h>
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 537 "scanner.ll"


