#define yyFlexLexer auFlexLexer

#line 4 "AuditConfig.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/mico/cvsroot/mico/orb/security/AuditConfig.cc,v 1.3 2003/03/14 14:50:31 gardas Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
//class istream;
#include <unistd.h>
#include <iostream>
/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int AuditConfig::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 33
#define YY_END_OF_BUFFER 34
static yyconst short int yy_acclist[154] =
    {   0,
       17,   17,   25,   25,   30,   30,   12,   12,   34,   32,
       33,    1,   32,   33,    1,   33,    2,   32,   33,   32,
       33,   32,   33,    3,   33,   32,   33,   33,   32,   33,
       17,   32,   33,   16,   32,   33,   32,   33,   19,   32,
       33,   32,   33,16404,   32,   33,16404,   25,   32,   33,
       25,   33,   26,   32,   33,   27,   32,   33,   32,   33,
    16412,   24,   32,   33,   30,   32,   33,   29,   32,   33,
       32,   33,    9,   12,   32,   33,    9,   12,   33,   10,
       32,   33,   14,   32,   33,   32,   33,   32,   33,   11,
       32,   33,   13,   32,   33,    5,   32,   33,   32,   33,

    16391,   32,   33,16391,   32,   33,    8,   33,   32,   33,
       23,   33,    1,16388,    3,   21,   22,   17,   16,   19,
    16404,   25, 8220,16412,   30,   29,    9,   12,   14,    5,
    16391,16391,    8,   23, 8196,16402, 8212,   31, 8199,16391,
     8210,16391,16391,16399,16391, 8207,16391,16391,16391,16391,
    16390,16390, 8198
    } ;

static yyconst short int yy_accept[127] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    4,    5,    6,    7,    8,    9,    9,    9,    9,
        9,    9,    9,   10,   12,   15,   17,   20,   22,   24,
       26,   28,   29,   31,   34,   37,   39,   42,   45,   48,
       51,   53,   56,   59,   62,   65,   68,   71,   73,   77,
       80,   83,   86,   88,   90,   93,   96,   99,  102,  105,
      107,  109,  111,  113,  114,  115,  115,  116,  116,  116,
      117,  118,  119,  120,  120,  120,  121,  121,  122,  123,
      123,  124,  125,  126,  127,  127,  129,  130,  130,  130,
      131,  131,  132,  133,  133,  134,  134,  135,  136,  137,

      138,  139,  139,  139,  140,  141,  142,  142,  142,  143,
      143,  143,  144,  145,  146,  146,  147,  148,  149,  150,
      151,  151,  152,  153,  154,  154
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    5,    1,    1,    1,    1,    6,
        7,    8,    4,    9,    4,   10,   11,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   12,    4,    1,
       13,    1,    4,    4,   14,   15,   16,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       17,    4,   18,    1,    1,    1,   19,   20,   21,   15,

       22,   15,   15,   15,   23,   15,   15,   24,   25,   26,
       27,   15,   15,   28,   29,   30,   15,   31,   15,   15,
       32,   15,   33,    1,   34,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[35] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    5,    6,
        6,    6,    7,    8,    8,    8,    9,    9,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    1,    1
    } ;

static yyconst short int yy_base[140] =
    {   0,
        0,    4,  352,  350,   15,    0,   48,   51,   65,    0,
       99,    0,  132,  134,  150,    0,  184,    0,  349,  337,
      298,  297,  299,  412,   10,   53,  412,    0,  295,  412,
      140,  412,   40,    2,  412,   35,  295,  294,  293,  136,
      138,  412,  412,  141,  412,  146,  412,    0,  158,  160,
      412,  162,  270,  271,  412,  412,  290,  164,  217,  287,
      412,  286,  412,  166,  170,  285,  412,  219,  157,  412,
      412,  168,  412,  263,  254,  283,  221,  279,  174,  220,
      412,  222,  226,  412,  262,  179,  223,  256,  249,  274,
      227,  229,  238,  272,  412,  270,  412,  240,  259,  412,

      412,  212,  196,  412,  244,  176,  124,  124,  246,  114,
       36,  248,  243,  251,  250,  412,  254,  256,  263,  265,
      269,   50,    8,    6,  412,  302,  311,  320,  329,  333,
      341,  349,  357,  364,  371,  378,  386,  395,  403
    } ;

static yyconst short int yy_def[140] =
    {   0,
      126,  126,  127,  127,  125,    5,  126,  126,  125,    9,
      125,   11,  126,  126,  126,   15,  125,   17,  128,  128,
      129,  129,  125,  125,  125,  125,  125,  130,  131,  125,
      132,  125,  132,  125,  125,  125,  125,  125,  133,  125,
      125,  125,  125,  134,  125,  125,  125,  135,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  136,  136,  137,
      125,  138,  125,  125,  130,  131,  125,  132,  132,  125,
      125,  125,  125,  125,  125,  125,  125,  133,  125,  125,
      125,  134,  125,  125,  135,  125,  125,  125,  125,  125,
      125,  136,  136,  137,  125,  138,  125,  125,  125,  125,

      125,  125,  125,  125,  136,  125,  125,  125,  136,  125,
      125,  136,  125,  136,  125,  125,  136,  136,  136,  136,
      125,  139,  139,  139,    0,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125
    } ;

static yyconst short int yy_nxt[447] =
    {   0,
      125,   25,   26,   72,   27,   25,   26,  125,   27,  123,
       28,   64,   64,   73,   28,   24,   31,   32,   24,   24,
       24,   24,   24,   33,   24,   24,   24,   24,   33,   33,
       33,   24,   24,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   24,   24,   34,
       32,  123,   34,   32,   64,   64,  125,   71,   74,   35,
       75,   36,   35,  113,   36,   24,   37,   32,   24,   24,
       24,   24,   38,   24,   39,   39,   39,   24,   39,   39,
       39,   24,   24,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   24,   24,   24,

       40,   41,   24,   42,   24,   43,   24,   24,   24,   24,
       24,   24,   44,   44,   44,   24,   45,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   24,   24,   46,   32,   46,   32,   79,   79,   79,
       79,   68,   80,  113,   47,  111,   47,   83,   48,  110,
       48,   49,   50,   81,   51,   52,   70,   71,   84,   86,
       86,   86,   86,   87,   87,   91,   91,   64,   64,   72,
       53,   98,   98,  125,   71,   79,   79,  106,   54,   73,
       86,   86,   55,   56,   24,   57,   32,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   58,   58,   59,

       24,   24,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   24,   24,   91,   91,
       68,   80,   77,   80,   87,   87,  108,   83,   91,   91,
       91,   91,   81,  107,   81,   70,   71,  100,   84,   91,
       91,   98,   98,   93,  115,   91,   91,   91,   91,   91,
       91,  115,   91,   91,  116,   91,   91,   91,   91,  104,
      106,  116,  105,  109,   91,   91,  121,   91,  112,  117,
      121,   91,   97,  114,   95,   90,  103,  122,  102,  101,
       77,  122,  119,  118,   76,   99,   99,   67,   97,   95,
      120,   90,   89,   88,   77,   77,   76,   67,  125,   63,

       63,  104,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   61,
       65,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       69,   61,   30,   69,   30,  125,   69,   69,   78,  125,
      125,  125,   78,  125,   78,   82,  125,  125,  125,  125,
       82,   82,   85,  125,   85,   85,   85,   85,   85,   92,
       92,  125,  125,  125,  125,   92,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   96,   96,   96,   96,   96,

       96,   96,   96,   96,  124,  125,  125,  125,  125,  125,
      124,   23,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125
    } ;

static yyconst short int yy_chk[447] =
    {   0,
        0,    1,    1,   34,    1,    2,    2,  124,    2,  123,
        1,   25,   25,   34,    2,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
        7,  122,    8,    8,   26,   26,   33,   33,   36,    7,
       36,    7,    8,  111,    8,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   14,   14,   40,   40,   41,
       41,   31,   44,  110,   13,  108,   14,   46,   13,  107,
       14,   15,   15,   44,   15,   15,   31,   31,   46,   49,
       49,   50,   50,   52,   52,   58,   58,   64,   64,   72,
       15,   65,   65,   69,   69,   79,   79,  106,   15,   72,
       86,   86,   15,   15,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   59,   59,
       68,   80,   77,   82,   87,   87,  103,   83,   91,   91,
       92,   92,   80,  102,   82,   68,   68,   77,   83,   93,
       93,   98,   98,   59,  113,  105,  105,  109,  109,  112,
      112,  115,  114,  114,  113,  117,  117,  118,  118,   91,
       99,  115,   93,  105,  119,  119,  120,  120,  109,  114,
      121,  121,   96,  112,   94,   90,   89,  120,   88,   85,
       78,  121,  118,  117,   76,   75,   74,   66,   62,   60,
      119,   57,   54,   53,   39,   38,   37,   29,   23,   22,

       21,  121,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  130,   20,
      130,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      132,   19,    4,  132,    3,    0,  132,  132,  133,    0,
        0,    0,  133,    0,  133,  134,    0,    0,    0,    0,
      134,  134,  135,    0,  135,  135,  135,  135,  135,  136,
      136,    0,    0,    0,    0,  136,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  139,    0,    0,    0,    0,    0,
      139,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "auditconf.lex"
#define INITIAL 0
#line 2 "auditconf.lex"
#include <mico/security/AuditConfig.h>
#include <mico/template_impl.h>
#include <mico/util.h>


using namespace std;

// 	int error;
//  Security::SecAttribute attr;
//  string iface_name;
//  string opt;
//  SecurityDomain::DomainAuthorityAdmin_var admt;
//  SecurityAdmin::AuditPolicy_var cpol; // client policy
//  SecurityAdmin::AuditPolicy_var spol; // server policy
//	Security::AuditCombinator at_comb;
//	Security::AuditEventTypeList eventtypelst;
//	Security::SelectorValueList  selectorlst;
//	
//  MICOSDM::NameExt_impl namext;
//  SecurityDomain::Name * nm;
//  SecurityDomain::PolicyCombinator pol_comb;
// 	MICOSDM::DomainManagerFactory_impl * dm_factory;
#define comment 1
#define evt 2
#define atcomb 3
#define iface 4
#define option 5
#define vle 6
#define rec 7
#define combp 8
#define recom 9
#define optcom 10

#line 537 "AuditConfig.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 26 "auditconf.lex"


#line 667 "AuditConfig.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 126 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 412 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 28 "auditconf.lex"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 "auditconf.lex"
{// comment
						 BEGIN(comment);
						}
	YY_BREAK
case 3:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 32 "auditconf.lex"
{
						 // comment here, nothing to do
						 BEGIN(INITIAL);
						}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(evt):
case YY_STATE_EOF(atcomb):
case YY_STATE_EOF(iface):
case YY_STATE_EOF(option):
case YY_STATE_EOF(vle):
case YY_STATE_EOF(rec):
case YY_STATE_EOF(combp):
case YY_STATE_EOF(recom):
case YY_STATE_EOF(optcom):
#line 36 "auditconf.lex"
{// End of file
    if (error)
	*yyout << "\n** syntax error(s)!\n";
    return 0;
}
YY_BREAK
case 4:
YY_RULE_SETUP
#line 41 "auditconf.lex"
{// domain name here
    nm = namext.to_name(YYText());
    for (int i = 0; i < nm->length(); i++) {
	(*nm)[i].kind = CORBA::string_dup((*nm)[0].id);
    }
    dm_factory->add_root_domain_manager((*nm)[0].id);
    SecurityDomain::DomainManagerAdmin_var dmroot = 
	dm_factory->get_root_domain_manager((*nm)[0].id);
    SecurityDomain::Name tempname;
    tempname.length(1);
    SecurityDomain::DomainManagerAdmin_var dmt =
	SecurityDomain::DomainManagerAdmin::_duplicate(dmroot);
    int i;
    for (i = 1; i < nm->length(); i++) { // check full name and create if necessary
	SecurityDomain::DomainAuthorityAdmin_var adm =
	    SecurityDomain::DomainAuthorityAdmin::_narrow(dmt);
	tempname[0] = (*nm)[i];
	SecurityDomain::DomainManagerAdmin_var dm = adm->get_domain_manager(tempname); 
	if (CORBA::is_nil(dm)) { // no such name
	    SecurityDomain::DomainManagerAdmin_var ndm = dm_factory->create_domain_manager();
	    adm->add_domain_manager(ndm, tempname);
	    dmt = SecurityDomain::DomainManagerAdmin::_duplicate(ndm);
	}
	else {
	    dmt = SecurityDomain::DomainManagerAdmin::_duplicate(dm);
	}
    }
    //
    tempname.length(nm->length() - 1);
    for (i = 1; i < nm->length(); i++)
	tempname[i -1] = (*nm)[i];
    
    SecurityDomain::DomainAuthorityAdmin_var admroot =
	SecurityDomain::DomainAuthorityAdmin::_narrow(dmroot);
    
    dmt = admroot->get_domain_manager(tempname); // our target domain manager, not nil !
    admt = SecurityDomain::DomainAuthorityAdmin::_narrow(dmt);
    CORBA::Policy_ptr po = admt->get_domain_policy(Security::SecTargetInvocationAudit);
    spol = SecurityAdmin::AuditPolicy::_narrow(po);
    delete nm;											  
    BEGIN(rec);
}
YY_BREAK
case 5:
YY_RULE_SETUP
#line 83 "auditconf.lex"

	YY_BREAK
case 6:
YY_RULE_SETUP
#line 84 "auditconf.lex"

	YY_BREAK
case 7:
YY_RULE_SETUP
#line 85 "auditconf.lex"
{// Policy combinator
											string str(YYText());
											if (str == "Union")
											  pol_comb = SecurityDomain::Union;
											else if (str == "Intersection")
											  pol_comb = SecurityDomain::Intersection;
											else if (str == "Negation")
											  pol_comb = SecurityDomain::Negation;
											else {
											  *yyout << "** Unknown Policy Combinator type - " << str << endl;
											  error = 1;
											  return 0;
											}
											BEGIN(rec);
										   }
	YY_BREAK
case 8:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 101 "auditconf.lex"
{ BEGIN(rec); }		   
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 103 "auditconf.lex"

	YY_BREAK
case 10:
YY_RULE_SETUP
#line 104 "auditconf.lex"
{ BEGIN(recom); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 105 "auditconf.lex"

	YY_BREAK
case 12:
YY_RULE_SETUP
#line 106 "auditconf.lex"

	YY_BREAK
case 13:
YY_RULE_SETUP
#line 107 "auditconf.lex"
{ // end of policy fulfilment
												admt->set_domain_policy(spol);
												admt->set_policy_combinator(Security::SecTargetInvocationAudit, SecurityDomain::Union);
												BEGIN(INITIAL);
											}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 112 "auditconf.lex"

	YY_BREAK
case 15:
YY_RULE_SETUP
#line 113 "auditconf.lex"
{ // server/client, not used in this mapping (object->domain)
											string str(YYText());
											BEGIN(atcomb);
										}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 117 "auditconf.lex"

	YY_BREAK
case 17:
YY_RULE_SETUP
#line 118 "auditconf.lex"

	YY_BREAK
case 18:
YY_RULE_SETUP
#line 119 "auditconf.lex"
{ // audit combinator
											string str(YYText());
											if (str == "Any")
												at_comb = Security::SecAnySelector;
											else if (str == "All")
												at_comb = Security::SecAllSelectors;
											else {
											  *yyout << "** Unknown Audit Combinator type - " << str << endl;
											  error = 1;
											  return 0;
											}
											BEGIN(iface);
										}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 132 "auditconf.lex"

	YY_BREAK
case 20:
YY_RULE_SETUP
#line 133 "auditconf.lex"
{ // interface name
											iface_name = YYText();
											if (iface_name == "*")
												iface_name = "";
											eventtypelst.length(0);
											
											BEGIN(evt);
										}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 141 "auditconf.lex"

	YY_BREAK
case 22:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 142 "auditconf.lex"
{ // event types list, remove blanks first
											string tmp(YYText());
											string list("");
											int i, j;
											for (i = 0; i < tmp.length(); i++) {
												if (tmp[i] == ' ') continue;
												list += tmp[i];
											}
											list += ',';
											i = 0;
											int len = 0;
											string part;
											Security::AuditEventType evtype;
											evtype.event_family.family_definer = 0; // OMG
											evtype.event_family.family = 12; // Audit event family
											for (; (j = list.find(',', i)) >= 0; j++, i += j - i) {
												part = list.substr(i, j - i);
												if (part == "All") {
													evtype.event_type = Security::AuditAll;
												}
												else if (part == "PrincipalAuth")  {
													evtype.event_type = Security::AuditPrincipalAuth;
												}
												else if (part == "SessionAuth") {
													evtype.event_type = Security::AuditSessionAuth;
												}
												else if (part == "Authorization") {
													evtype.event_type = Security::AuditAuthorization;
												}
												else if (part == "Invocation") {
													evtype.event_type = Security::AuditInvocation;
												}
//												else if (part == "FailedAuthorization")
//													evtype.event_type = Security::AuditFailedAuthorization;
												else {
											  		*yyout << "** Unknown Audit Event type - " << part << endl;
											  		error = 1;
											  		return 0;
												}
												eventtypelst.length(len + 1);
												eventtypelst[len] = evtype;
												len++;
											}
//											selectorlst->length(7);
											selectorlst[0].selector = Security::InterfaceName;
											selectorlst[0].value <<= "";

											selectorlst[1].selector = Security::ObjectRef;
											selectorlst[1].value <<= "";

											selectorlst[2].selector = Security::Operation;
											selectorlst[2].value <<= "";

											selectorlst[3].selector = Security::Initiator;
											selectorlst[3].value <<= "";

											selectorlst[4].selector = Security::SuccessFailure;
											selectorlst[4].value <<= (short)(-1);

											selectorlst[5].selector = Security::Time;
											SecurityAdmin::AuditTimeInterval time_interval;
											time_interval.begin = 1;
											time_interval.end =  1;
											selectorlst[5].value <<= time_interval; //any time interval;

											selectorlst[6].selector = Security::DayOfWeek;
											selectorlst[6].value <<= (short)(-1); //any day of week
											
											BEGIN(option);
										}
	YY_BREAK
case 23:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 213 "auditconf.lex"
{ BEGIN(option); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 215 "auditconf.lex"

	YY_BREAK
case 25:
YY_RULE_SETUP
#line 216 "auditconf.lex"

	YY_BREAK
case 26:
YY_RULE_SETUP
#line 217 "auditconf.lex"
{ BEGIN(optcom); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 218 "auditconf.lex"
{ // end of options
												selectorlst[0].value <<= CORBA::string_dup(iface_name.c_str());
												spol->set_audit_selectors(CORBA::string_dup(iface_name.c_str()),
																		 eventtypelst, selectorlst, at_comb);
												BEGIN(rec);
											}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 224 "auditconf.lex"
{ // option here
												opt = YYText();
												BEGIN(vle);
											}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 228 "auditconf.lex"

	YY_BREAK
case 30:
YY_RULE_SETUP
#line 229 "auditconf.lex"

	YY_BREAK
case 31:
YY_RULE_SETUP
#line 230 "auditconf.lex"
{ // option value here
												string val1(YYText());
												int i = 0;
												while (val1[i] == '[' || val1[i] == ' ') { // leading blanks and [
													i++;
												}
												int j = val1.length() - 1;
												while (val1[j] == ']' || val1[j] == ' ') { // trailing blanks and ]
													j--;
												}
												string val = val1.substr(i, j - i + 1);
												Security::SelectorValue sval;
												if (opt == "Operation") {
													sval.value <<= CORBA::string_dup(val.c_str());
													sval.selector = Security::Operation;
													selectorlst[2] = sval;
												}
												else if (opt == "Initiator") {
													sval.value <<= CORBA::string_dup(val.c_str());
													sval.selector = Security::Initiator;
													selectorlst[3] = sval;
												}
												else if (opt == "SuccessFailure") {
													sval.selector = Security::SuccessFailure;
													if (val == "true")
														sval.value <<= (short)1;
													else if (val == "false")
														sval.value <<= (short)0;
													else {
											  			*yyout << "** Unknown SuccessFailure value - " << val << endl;
											  			error = 1;
											  			return 0;
													}
													selectorlst[4] = sval;
												}
												else if (opt == "Time") {
													sval.selector = Security::Time;
													int pos = val.find('-', 0);
													string strbeg = val.substr(0, pos);
													string strend = val.substr(pos + 1, val.length() - pos - 1);
													time_t tbeg = parse_time(strbeg);
													time_t tend = parse_time(strend);
													if (tbeg == (time_t)(-1) || tend == (time_t)(-1)) {
											  			*yyout << "** Wrong Time value - " << val << endl;
											  			error = 1;
											  			return 0;
											  		}
													SecurityAdmin::AuditTimeInterval tmint;
													tmint.begin = tbeg;
													tmint.end = tend;
													sval.value <<= tmint;
													selectorlst[5] = sval;
												}
												else if (opt == "DayOfWeek") {
													sval.selector = Security::DayOfWeek;
													if (val == "Sun")
														sval.value <<= (short)0;
													else if (val == "Mon")
														sval.value <<= (short)1;
													else if (val == "Tue")
														sval.value <<= (short)2;
													else if (val == "Wed")
														sval.value <<= (short)3;
													else if (val == "Thu")
														sval.value <<= (short)4;
													else if (val == "Fri")
														sval.value <<= (short)5;
													else if (val == "Sat")
														sval.value <<= (short)6;
													else {
											  			*yyout << "** Wrong DayOfWeek value - " << val << endl;
											  			error = 1;
											  			return 0;
											  		}
											  		selectorlst[6] = sval;
												}
												else {
													*yyout << "** Wrong selector value - " << val << endl;
													error = 1;
													return 0;
												}
													
//												int len = selectorlst.length();
//												selectorlst.length(len + 1);
//												selectorlst[len] = sval;
												
												BEGIN(option);
											}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 320 "auditconf.lex"
{error = 1; ECHO;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 322 "auditconf.lex"
ECHO;
	YY_BREAK
#line 1216 "AuditConfig.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 126 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 126 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 125);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 322 "auditconf.lex"

