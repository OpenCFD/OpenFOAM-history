.TH LAM_RTRGET 2 "July, 2007" "LAM 7.1.4" "LAM REMOTE LIBRARY"
.hy 0
.SH NAME
lam_rtrget, lam_rtrforget, lam_rtrfget, lam_rtrfforget \- Unload LAM trace data.
.SH SYNOPSIS
.hy 1
.HP
int lam_rtrget (int nodeid, int listno, int pid, char **buffer);
.HP
int lam_rtrforget (int nodeid, int listno, int pid, char **buffer);
.HP
int lam_rtrfget (int nodeid, int listno, int pid, int fd);
.HP
int lam_rtrfforget (int nodeid, int listno, int pid, int fd);
.SH DESCRIPTION
The client function,
.IR lam_rtrget() ,
gets a copy of selected trace data held by a remote trace daemon and
stores it in space allocated and assigned to the
.I buffer
argument.
It does not obtain trace data still stored with traced processes and
not found in the daemon.
A traced process can be forced to flush its trace data by sending it
a SIGTRACE signal.
See MPIL_Signal(2).
.PP
Trace data is unloaded from the selected node and list (see lam_rtrstore(2))
that was produced by the selected process ID.
A value of -1 for
.I listno
and/or
.I pid
selects all lists and/or all trace producing clients, respectively.
The combination effectively unloads all stored trace data from the given node.
.PP
Trace data is read non-destructively by
.I lam_rtrget()
and destructively by
.IR lam_rtrforget() .
The trace data is stored in an allocated buffer whose address is passed
back to the caller through the
.I buffer
argument.
The caller is responsible for calling free(3) on this pointer.
.PP
Trace data is read into a file, instead of an allocated buffer, by
.I lam_rtrfget()
and
.IR lam_rtrfforget() .
The file is given as a descriptor, returned by open(2) and opened
for write.
.SH SEE ALSO
lam_rtrstore(2), MPIL_Signal(2)
