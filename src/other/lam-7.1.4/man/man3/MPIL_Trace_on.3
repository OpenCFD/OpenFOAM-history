.TH MPIL_Trace_on 3 "6/24/2006" "LAM/MPI 7.1.4" "LAM/MPI"
.SH NAME
MPIL_Trace_on \-  LAM/MPI-specific function to enable run-time tracing 
.SH SYNOPSIS
.nf
#include <mpi.h>
int MPIL_Trace_on(void)
.fi
.SH NOTES

These functions give the application the flexibility to generate
traces only during certain interesting phases of the application's
execution.  This technique can considerably reduce the size of the
trace files and burden of displaying them.

Both functions are collective over the 
.I MPI_COMM_WORLD
communicator.
In typical usage, the 
.I -toff
option of 
.I mpirun
(1) would be used to
enable tracing, but start with the runtime switch in the off position.
At the beginning of an interesting phase of program execution,
.I MPIL_Trace_on
would be called.  
.I MPIL_Trace_off
would be called
after the interesting phase.  Tracing can be turned on and off many
times.  Each period of tracing eventually forms a trace segment in the
trace file extracted by 
.I lamtrace
(1).  If the on/off functions are
never used and tracing is enabled with the 
.I -ton
option of
.I mpirun
(1), a single trace segment is produced.

The on/off functions have no effect if tracing is not enabled by
.I mpirun
(1) with either the 
.I -ton
or 
.I -toff
switches.  Thus, an
application can be littered with these functions but run without trace
collection and very little additional overhead due to the no-operation
function calls.

This is a LAM/MPI-specific function and is intended mainly for
debugging.  If this function is used, it should be used in conjunction
with the 
.I LAM_MPI
C preprocessor macro

.nf
#if LAM_MPI
MPIL_Trace_on();
#endif
.fi


.SH LIMITATIONS

After the volume of generated traces exceeds a preset limit, the
oldest traces are discarded in favour of new traces.  Avoiding
discarded traces is further incentive to use 
.I MPIL_Trace_on
and
.I MPIL_Trace_off
\&.


.SH NOTES FOR FORTRAN

All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
)
have an additional argument 
.I ierr
at the end of the argument list.
.I ierr
is an integer and has the same meaning as the return value of
the routine in C.  In Fortran, MPI routines are subroutines, and are
invoked with the 
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type
.I INTEGER
in Fortran.

.SH ERRORS

If an error occurs in an MPI function, the current MPI error handler
is called to handle it.  By default, this error handler aborts the
MPI job.  The error handler may be changed with 
.I MPI_Errhandler_set
;
the predefined error handler 
.I MPI_ERRORS_RETURN
may be used to cause
error values to be returned (in C and Fortran; this error handler is
less useful in with the C++ MPI bindings.  The predefined error
handler 
.I MPI::ERRORS_THROW_EXCEPTIONS
should be used in C++ if the
error value needs to be recovered).  Note that MPI does 
.I not
guarantee that an MPI program can continue past an error.

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error
value; C routines as the value of the function and Fortran routines
in the last argument.  The C++ bindings for MPI do not return error
values; instead, error values are communicated by throwing exceptions
of type 
.I MPI::Exception
(but not by default).  Exceptions are only
thrown if the error value is not 
.I MPI::SUCCESS
\&.


Note that if the 
.I MPI::ERRORS_RETURN
handler is set in C++, while
MPI functions will return upon an error, there will be no way to
recover what the actual error value was.
.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1
.PD 0
.TP
.B MPI_ERR_OTHER 
- Other error; use 
.I MPI_Error_string
to get more
information about this error code.
.PD 1

.SH SEE ALSO
MPI_Trace_off, mpirun
.br
.SH LOCATION
mpil_trace.c
