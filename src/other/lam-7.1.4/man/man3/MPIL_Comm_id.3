.TH MPIL_Comm_id 3 "6/24/2006" "LAM/MPI 7.1.4" "LAM/MPI"
.SH NAME
MPIL_Comm_id \-  LAM/MPI-specific function to return the context ID of the communicator 
.SH SYNOPSIS
.nf
#include <mpi.h>
int
MPIL_Comm_id(MPI_Comm comm, int *pcid)
.fi
.SH INPUT PARAMETER
.PD 0
.TP
.B comm 
- communicator (handle)
.PD 1

.SH OUTPUT PARAMETER
.PD 0
.TP
.B pcid 
- communicator context id (integer)
.PD 1

.SH NOTES

In the LAM implementation of MPI, each communicator has an integer
context ID associated with it for synchronizing on different contexts.
This ID is global to all the processes in the communicator's group,
and uniquely identifies that communicator for each process.  These
properties allow the processes to safely exchange messages without
interference from operations on other communicators.

The MPI standard does not provide a way to access/view this
implementation-dependent synchronization since communicators are
opaque objects.  Users do not need such access for normal MPI
operations.  On the other hand, when debugging MPI applications, the
opaque nature of communicators hinders the user's efforts.  This is
especially true on fully observable systems such as LAM, where users
can monitor the full state of the processes and message queues, which
includes the context ID (see 
.I mpitask
(1) and 
.I mpimsg
(1)).

This is a LAM/MPI-specific function and is intended mainly for
debugging.  If this function is used, it should be used in conjunction
with the 
.I LAM_MPI
C preprocessor macro

.nf
#if LAM_MPI
int cid;
MPIL_Comm_id(MPI_COMM_WORLD, &cid);
#endif
.fi


.SH NOTES FOR FORTRAN

All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
)
have an additional argument 
.I ierr
at the end of the argument list.
.I ierr
is an integer and has the same meaning as the return value of
the routine in C.  In Fortran, MPI routines are subroutines, and are
invoked with the 
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type
.I INTEGER
in Fortran.

.SH ERRORS

If an error occurs in an MPI function, the current MPI error handler
is called to handle it.  By default, this error handler aborts the
MPI job.  The error handler may be changed with 
.I MPI_Errhandler_set
;
the predefined error handler 
.I MPI_ERRORS_RETURN
may be used to cause
error values to be returned (in C and Fortran; this error handler is
less useful in with the C++ MPI bindings.  The predefined error
handler 
.I MPI::ERRORS_THROW_EXCEPTIONS
should be used in C++ if the
error value needs to be recovered).  Note that MPI does 
.I not
guarantee that an MPI program can continue past an error.

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error
value; C routines as the value of the function and Fortran routines
in the last argument.  The C++ bindings for MPI do not return error
values; instead, error values are communicated by throwing exceptions
of type 
.I MPI::Exception
(but not by default).  Exceptions are only
thrown if the error value is not 
.I MPI::SUCCESS
\&.


Note that if the 
.I MPI::ERRORS_RETURN
handler is set in C++, while
MPI functions will return upon an error, there will be no way to
recover what the actual error value was.
.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1
.PD 0
.TP
.B MPI_ERR_COMM 
- Invalid communicator.  A common error is to use a
null communicator in a call (not even allowed in 
.I MPI_Comm_rank
).
.PD 1
.PD 0
.TP
.B MPI_ERR_ARG 
- Invalid argument.  Some argument is invalid and is not
identified by a specific error class.  This is typically a NULL
pointer or other such error.
.PD 1

.SH SEE ALSO
MPIL_Comm_gps, MPIL_Type_id
.br
.SH LOCATION
mpil_id.c
