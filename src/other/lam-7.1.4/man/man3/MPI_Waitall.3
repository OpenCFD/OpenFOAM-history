.TH MPI_Waitall 3 "6/24/2006" "LAM/MPI 7.1.4" "LAM/MPI"
.SH NAME
MPI_Waitall \-  Waits for all given communications to complete 
.SH SYNOPSIS
.nf
#include <mpi.h>
int MPI_Waitall(int count, MPI_Request *reqs, 
               MPI_Status *stats)
.fi
.SH INPUT PARAMETERS
.PD 0
.TP
.B count 
- lists length (integer) 
.PD 1
.PD 0
.TP
.B reqs 
- array of requests (array of handles) 
.PD 1

.SH OUTPUT PARAMETER
.PD 0
.TP
.B stats 
- array of status objects (array of Status), which may be the
.PD 1
MPI constant 
.I MPI_STATUSES_IGNORE


.SH NOTE ON STATUS FOR SEND OPERATIONS

For send operations, the only use of status is for MPI_Test_cancelled
in the case that there is an error, in which case the MPI_ERROR field
of status will be set.

.SH NOTES FOR FORTRAN

All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
)
have an additional argument 
.I ierr
at the end of the argument list.
.I ierr
is an integer and has the same meaning as the return value of
the routine in C.  In Fortran, MPI routines are subroutines, and are
invoked with the 
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type
.I INTEGER
in Fortran.

.SH ERRORS

If an error occurs in an MPI function, the current MPI error handler
is called to handle it.  By default, this error handler aborts the
MPI job.  The error handler may be changed with 
.I MPI_Errhandler_set
;
the predefined error handler 
.I MPI_ERRORS_RETURN
may be used to cause
error values to be returned (in C and Fortran; this error handler is
less useful in with the C++ MPI bindings.  The predefined error
handler 
.I MPI::ERRORS_THROW_EXCEPTIONS
should be used in C++ if the
error value needs to be recovered).  Note that MPI does 
.I not
guarantee that an MPI program can continue past an error.

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error
value; C routines as the value of the function and Fortran routines
in the last argument.  The C++ bindings for MPI do not return error
values; instead, error values are communicated by throwing exceptions
of type 
.I MPI::Exception
(but not by default).  Exceptions are only
thrown if the error value is not 
.I MPI::SUCCESS
\&.


Note that if the 
.I MPI::ERRORS_RETURN
handler is set in C++, while
MPI functions will return upon an error, there will be no way to
recover what the actual error value was.
.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1
.PD 0
.TP
.B MPI_ERR_REQUEST 
- Invalid 
.I MPI_Request
; either null or,
.I MPI_REQUEST_NULL
, in the case of a 
.I MPI_Start
or 
.I MPI_Startall
,
not a persistent request.
.PD 1
.PD 0
.TP
.B MPI_ERR_ARG 
- Invalid argument.  Some argument is invalid and is not
identified by a specific error class.  This is typically a NULL
pointer or other such error.
.PD 1
.PD 0
.TP
.B MPI_ERR_COUNT 
- Invalid count argument.  Count arguments must be
non-negative; a count of zero is often valid.
.PD 1

.PD 0
.TP
.B MPI_ERR_IN_STATUS 
- The actual error value is in the 
.I MPI_Status
argument.  Note that if this error occurs and 
.I MPI_STATUS_IGNORE
or
.I MPI_STATUSES_IGNORE
was used as the status argument, the actual
error will be lost. This error class is returned only from the
multiple-completion routines (
.I MPI_Testall
, 
.I MPI_Testany
,
.I MPI_Testsome
, 
.I MPI_Waitall
, 
.I MPI_Waitany
, and 
.I MPI_Waitsome
).
The field 
.I MPI_ERROR
in the status argument contains the error
value or 
.I MPI_SUCCESS
(no error and complete) or 
.I MPI_ERR_PENDING
to indicate that the request has not completed.
.PD 1
The MPI Standard does not specify what the result of the multiple
completion routines is when an error occurs.  For example, in an
.I MPI_WAITALL
, does the routine wait for all requests to either fail
or complete, or does it return immediately (with the MPI definition
of immediately, which means independent of actions of other MPI
processes)?  LAM/MPI has chosen to make the return immediate
(alternately, local in MPI terms), and to use the error class
.I MPI_ERR_PENDING
(introduced in MPI 1.1) to indicate which requests
have not completed.  In most cases, only one request with an error
will be detected in each call to an MPI routine that tests multiple
requests.  The requests that have not been processed (because an
error occured in one of the requests) will have their 
.I MPI_ERROR
field marked with 
.I MPI_ERR_PENDING
\&.

.PD 0
.TP
.B MPI_ERR_PENDING 
- Pending request (not an error).  See
.I MPI_ERR_IN_STATUS
\&.
This value indicates that the request is not
complete nor has a encountered a detected error.
.PD 1

.SH MORE INFORMATION

For more information, please see the official MPI Forum web site,
which contains the text of both the MPI-1 and MPI-2 standards.  These
documents contain detailed information about each MPI function (most
of which is not duplicated in these man pages).

.I http://www.mpi-forum.org/


.SH ACKNOWLEDGEMENTS

The LAM Team would like the thank the MPICH Team for the handy program
to generate man pages ("doctext" from
.I ftp://ftp.mcs.anl.gov/pub/sowing/sowing.tar.gz
), the initial
formatting, and some initial text for most of the MPI-1 man pages.
.SH LOCATION
waitall.c
