.TH MPI_Get 3 "6/24/2006" "LAM/MPI 7.1.4" "LAM/MPI"
.SH NAME
MPI_Get \-  One Sided data fetch 
.SH SYNOPSIS
.nf
#include <mpi.h>
int
MPI_Get(orgaddr, orgcnt, orgtype, rank, targdisp, targcnt, targtype, win)

void                  *orgaddr;
int                   orgcnt;
MPI_Datatype           orgtype;
int                   rank;
MPI_Aint               targdisp;
int                   targcnt;
MPI_Datatype           targtype;
MPI_Win               win;

.fi
.SH INPUT PARAMETERS
.PD 0
.TP
.B orgaddr 
- initial address of origin buffer (choice) 
.PD 1
.PD 0
.TP
.B orgcnt 
- number of entries in origin buffer (nonnegative integer) 
.PD 1
.PD 0
.TP
.B orgtype 
- datatype of each entry in origin buffer (handle) 
.PD 1
.PD 0
.TP
.B rank 
- rank of target (nonnegative integer) 
.PD 1
.PD 0
.TP
.B targdisp 
- displacement from window start to the beginning of the target buffer (nonnegative integer) 
.PD 1
.PD 0
.TP
.B targcnt 
- number of entries in target buffer (nonnegative integer) 
.PD 1
.PD 0
.TP
.B targtype 
- datatype of each entry in target buffer (handle) 
.PD 1
.PD 0
.TP
.B win 
- window object used for communication (handle) 
.PD 1


.SH NOTES

Similar to MPI_PUT, except that the direction of data transfer is
reversed. Data are copied from the target memory to the origin. The
origin_datatype may not specify overlapping entries in the origin
buffer. The target buffer must be contained within the target window,
and the copied data must fit, without truncation, in the origin
buffer.

.SH NOTES FOR FORTRAN

All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
)
have an additional argument 
.I ierr
at the end of the argument list.
.I ierr
is an integer and has the same meaning as the return value of
the routine in C.  In Fortran, MPI routines are subroutines, and are
invoked with the 
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type
.I INTEGER
in Fortran.
.SH USAGE WITH IMPI EXTENSIONS

The IMPI standard only supports MPI-1 functions.  Hence, this function
is currently not designed to operate within an IMPI job.

.SH ERRORS

If an error occurs in an MPI function, the current MPI error handler
is called to handle it.  By default, this error handler aborts the
MPI job.  The error handler may be changed with 
.I MPI_Errhandler_set
;
the predefined error handler 
.I MPI_ERRORS_RETURN
may be used to cause
error values to be returned (in C and Fortran; this error handler is
less useful in with the C++ MPI bindings.  The predefined error
handler 
.I MPI::ERRORS_THROW_EXCEPTIONS
should be used in C++ if the
error value needs to be recovered).  Note that MPI does 
.I not
guarantee that an MPI program can continue past an error.

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error
value; C routines as the value of the function and Fortran routines
in the last argument.  The C++ bindings for MPI do not return error
values; instead, error values are communicated by throwing exceptions
of type 
.I MPI::Exception
(but not by default).  Exceptions are only
thrown if the error value is not 
.I MPI::SUCCESS
\&.


Note that if the 
.I MPI::ERRORS_RETURN
handler is set in C++, while
MPI functions will return upon an error, there will be no way to
recover what the actual error value was.
.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1
.PD 0
.TP
.B MPI_ERR_WIN 
- Invalid window.  A common error is to use a
null window in a call.
.PD 1
.PD 0
.TP
.B MPI_ERR_RANK 
- Invalid source or destination rank.  Ranks must be
between zero and the size of the communicator minus one; ranks in a
receive (
.I MPI_Recv
, 
.I MPI_Irecv
, 
.I MPI_Sendrecv
, etc.) may also be
.I MPI_ANY_SOURCE
\&.

.PD 1
.PD 0
.TP
.B MPI_ERR_OTHER 
- Other error; use 
.I MPI_Error_string
to get more
information about this error code.
.PD 1
.PD 0
.TP
.B MPI_ERR_EPOCH 
- This error indicates than an operation has been
attempted on a "closed" window. Certain one-sided operations can
only be performed on windows whose epoch has been started with
MPI_Win_start.
.PD 1
.PD 0
.TP
.B MPI_ERR_INTERN 
- An internal error has been detected.  This is
fatal.  Please send a bug report to the LAM mailing list (see
.I http://www.lam-mpi.org/contact.php
). 
.PD 1
.PD 0
.TP
.B MPI_ERR_TYPENOTSUP 
- Type not supported for this operation.  This
typically applies to either reduction operations (for which only a
limited combination of datatypes and operations are defined, see
MPI-1, section 4.9.2) or one-sided operations where the actions on
specific datatpyes have not been implemented yet.
.PD 1

.SH SEE ALSO
MPI_Put(3), MPI_Accumulate(3), MPI_Win_create(3), MPI_Win_start(3), MPI_Win_complete(3), MPI_Win_fence(3), MPI_Win_free(3), MPI_Win_get_group(3), MPI_Win_get_group(3), MPI_Win_wait(3)
.br

.SH MORE INFORMATION

For more information, please see the official MPI Forum web site,
which contains the text of both the MPI-1 and MPI-2 standards.  These
documents contain detailed information about each MPI function (most
of which is not duplicated in these man pages).

.I http://www.mpi-forum.org/
.SH LOCATION
get.c
