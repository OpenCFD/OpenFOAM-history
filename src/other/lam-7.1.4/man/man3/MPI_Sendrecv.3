.TH MPI_Sendrecv 3 "6/24/2006" "LAM/MPI 7.1.4" "LAM/MPI"
.SH NAME
MPI_Sendrecv \-  Sends and receives a message 
.SH SYNOPSIS
.nf
#include <mpi.h>
int MPI_Sendrecv(void *sbuf, int scount, MPI_Datatype sdtype, 
                int dest, int stag, void *rbuf, int rcount, 
                MPI_Datatype rdtype, int src, int rtag, 
                MPI_Comm comm, MPI_Status *status)
.fi
.SH INPUT PARAMETERS
.PD 0
.TP
.B sbuf 
- initial address of send buffer (choice) 
.PD 1
.PD 0
.TP
.B scount 
- number of elements in send buffer (integer) 
.PD 1
.PD 0
.TP
.B sdtype 
- type of elements in send buffer (handle) 
.PD 1
.PD 0
.TP
.B dest 
- rank of destination (integer) 
.PD 1
.PD 0
.TP
.B stag 
- send tag (integer) 
.PD 1
.PD 0
.TP
.B rcount 
- number of elements in receive buffer (integer) 
.PD 1
.PD 0
.TP
.B rdtype 
- type of elements in receive buffer (handle) 
.PD 1
.PD 0
.TP
.B src 
- rank of source (integer) 
.PD 1
.PD 0
.TP
.B rtag 
- receive tag (integer) 
.PD 1
.PD 0
.TP
.B comm 
- communicator (handle) 
.PD 1

.SH OUTPUT PARAMETERS
.PD 0
.TP
.B rbuf 
- initial address of receive buffer (choice) 
.PD 1
.PD 0
.TP
.B status 
- status object (Status).  This refers to the receive
operation.  Can also be the MPI constant 
.I MPI_STATUS_IGNORE
, if the
return status is not desired.
.PD 1

.SH NOTES

To dispell a common misconception: 
.I src
and 
.I dest
do not have to be
the same.  Additionally, a common mistake when using this function is
to mismatch the tags with the source and destination ranks, which can
result in deadlock.

This function is guaranteed not to deadlock in situations where pairs
of blocking sends and receives may deadlock.  For example, the
following code may deadlock if all ranks in 
.I MPI_COMM_WORLD
execute
it simultaneously

.nf
int rank, size, to, from;
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);
to = (rank + 1) % size;
from = (rank + size - 1) % size;
MPI_Send(send_buffer, ..., to, tag, MPI_COMM_WORLD);
MPI_Recv(recv_buffer, ..., from, tag, MPI_COMM_WORLD);
.fi


If even one rank's 
.I MPI_Send
blocks and never completes, the entire
operation may deadlock.  One alternative is to use 
.I MPI_Sendrecv
in
this situation because it is guaranteed not to deadlock.

.SH NOTES FOR FORTRAN

All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
)
have an additional argument 
.I ierr
at the end of the argument list.
.I ierr
is an integer and has the same meaning as the return value of
the routine in C.  In Fortran, MPI routines are subroutines, and are
invoked with the 
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type
.I INTEGER
in Fortran.

.SH ERRORS

If an error occurs in an MPI function, the current MPI error handler
is called to handle it.  By default, this error handler aborts the
MPI job.  The error handler may be changed with 
.I MPI_Errhandler_set
;
the predefined error handler 
.I MPI_ERRORS_RETURN
may be used to cause
error values to be returned (in C and Fortran; this error handler is
less useful in with the C++ MPI bindings.  The predefined error
handler 
.I MPI::ERRORS_THROW_EXCEPTIONS
should be used in C++ if the
error value needs to be recovered).  Note that MPI does 
.I not
guarantee that an MPI program can continue past an error.

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error
value; C routines as the value of the function and Fortran routines
in the last argument.  The C++ bindings for MPI do not return error
values; instead, error values are communicated by throwing exceptions
of type 
.I MPI::Exception
(but not by default).  Exceptions are only
thrown if the error value is not 
.I MPI::SUCCESS
\&.


Note that if the 
.I MPI::ERRORS_RETURN
handler is set in C++, while
MPI functions will return upon an error, there will be no way to
recover what the actual error value was.
.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1
.PD 0
.TP
.B MPI_ERR_COMM 
- Invalid communicator.  A common error is to use a
null communicator in a call (not even allowed in 
.I MPI_Comm_rank
).
.PD 1
.PD 0
.TP
.B MPI_ERR_COUNT 
- Invalid count argument.  Count arguments must be
non-negative; a count of zero is often valid.
.PD 1
.PD 0
.TP
.B MPI_ERR_TYPE 
- Invalid datatype argument.  May be an uncommitted
MPI_Datatype (see 
.I MPI_Type_commit
).
.PD 1
.PD 0
.TP
.B MPI_ERR_TAG 
- Invalid tag argument.  Tags must be non-negative;
tags in a receive (
.I MPI_Recv
, 
.I MPI_Irecv
, 
.I MPI_Sendrecv
, etc.)
may also be 
.I MPI_ANY_TAG
\&.
The largest tag value is available
through the the attribute 
.I MPI_TAG_UB
\&.

.PD 1
.PD 0
.TP
.B MPI_ERR_RANK 
- Invalid source or destination rank.  Ranks must be
between zero and the size of the communicator minus one; ranks in a
receive (
.I MPI_Recv
, 
.I MPI_Irecv
, 
.I MPI_Sendrecv
, etc.) may also be
.I MPI_ANY_SOURCE
\&.

.PD 1

.SH SEE ALSO
MPI_Sendrecv_replace
.br

.SH MORE INFORMATION

For more information, please see the official MPI Forum web site,
which contains the text of both the MPI-1 and MPI-2 standards.  These
documents contain detailed information about each MPI function (most
of which is not duplicated in these man pages).

.I http://www.mpi-forum.org/


.SH ACKNOWLEDGEMENTS

The LAM Team would like the thank the MPICH Team for the handy program
to generate man pages ("doctext" from
.I ftp://ftp.mcs.anl.gov/pub/sowing/sowing.tar.gz
), the initial
formatting, and some initial text for most of the MPI-1 man pages.
.SH LOCATION
sendrecv.c
