.TH MPI_Buffer_detach 3 "6/24/2006" "LAM/MPI 7.1.4" "LAM/MPI"
.SH NAME
MPI_Buffer_detach \-  Removes an existing buffer (for use in 
.I MPI_Bsend
etc) 
.SH SYNOPSIS
.nf
#include <mpi.h>
int MPI_Buffer_detach(void *pbuf, int *psize)
.fi
.SH OUTPUT PARAMETERS
.PD 0
.TP
.B pbuf 
- initial buffer address (choice) 
.PD 1
.PD 0
.TP
.B psize 
- buffer size, in bytes (integer) 
.PD 1

.SH NOTES

The reason that 
.I MPI_Buffer_detach
returns the address and size of
the buffer being detached is to allow nested libraries to replace and
restore the buffer.  For example, consider

.nf
int size, mysize, idummy;
void *ptr, *myptr, *dummy;     
MPI_Buffer_detach(&ptr, &size);
MPI_Buffer_attach(myptr, mysize);
// ...library code...
MPI_Buffer_detach(&dummy, &idummy);
MPI_Buffer_attach(ptr, size);
.fi


This is much like the action of the Unix signal routine and has the
same strengths (it is simple) and weaknesses (it only works for nested
usages).

Note that for this approach to work, 
.I MPI_Buffer_detach
must return
.I MPI_SUCCESS
even when there is no buffer to detach.  In that case,
it returns a size of zero.  The MPI 1.1 standard for
.I MPI_BUFFER_DETACH
contains the text

.nf
The statements made in this section describe the behavior of MPI
for buffered-mode sends. When no buffer is currently associated,
MPI behaves as if a zero-sized buffer is associated with the
process.
.fi


This could be read as applying only to the various 
.I Bsend
routines.
This implementation takes the position that this applies to
.I MPI_BUFFER_DETACH
as well.

.SH NOTES FOR FORTRAN

All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
)
have an additional argument 
.I ierr
at the end of the argument list.
.I ierr
is an integer and has the same meaning as the return value of
the routine in C.  In Fortran, MPI routines are subroutines, and are
invoked with the 
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type
.I INTEGER
in Fortran.

The Fortran binding for this routine is different.  Because Fortran
does not have pointers, it is impossible to provide a way to use the
output of this routine to exchange buffers.  In this case, only the
size field is set.

.SH NOTES FOR C

Even though the 
.I pbuf
argument is declared as 
.I void *
, it is really
the address of a void pointer (i.e., 
.I void **
).  See the rationale in
the MPI Standard for more details.

.SH MORE INFORMATION

For more information, please see the official MPI Forum web site,
which contains the text of both the MPI-1 and MPI-2 standards.  These
documents contain detailed information about each MPI function (most
of which is not duplicated in these man pages).

.I http://www.mpi-forum.org/


.SH ACKNOWLEDGEMENTS

The LAM Team would like the thank the MPICH Team for the handy program
to generate man pages ("doctext" from
.I ftp://ftp.mcs.anl.gov/pub/sowing/sowing.tar.gz
), the initial
formatting, and some initial text for most of the MPI-1 man pages.
.SH LOCATION
bufdetach.c
