ALL FILES:
  * construct null
  * allow assignment of name/origin

  * MAJOR CHANGE
    - a point is a vector, but not vice versa
    - previous methods toGlobal/toLocal include the origin translation
      which is incorrect for vectors
    - new methods with explicit names:
          globalPosition, globalVector, relativePosition, relativeVector

    * change affects:
      finiteVolume/fields/fvPatchFields/derivedFvPatchFields/timeVaryingMappedFixedValue/timeVaryingMappedFixedValueFvPatchField.C
      utilities/mesh/generation/blockMesh/curvedEdges/arcEdge.C

------------------------

coordinateRotation.C
coordinateRotation.H

  * coordinateRotation is a tensor with restricted contructors

  * null contructor yields the global coordinate system

  * a null dictionary corresponds to a null constructor

  * new axis/direction constructor with functionality taken from
    porousZone and previous coordinateSystem implementation

  * allow any combination (e1/e2), (e2/e3), (e3,e1) of local vectors
    in addition to the axis/direction specification.
    - Added check for co-linear axes.
    - Could possibly eliminate the non-orthogonality check.

  * allow assigment from dictionary, automatically descend in a
    'coordinateRotation' sub-dictionary

  * add hook in New() for type 'coordinateRotation' with alias 'axes'

------------------------

coordinateSystem.C
coordinateSystem.H

  * remove pure virtual restriction - coordinateSystem can be used
    directly and has the same properties as a cartesianCS

  * null contructor yields the global coordinate system

  * a null dictionary entry corresponds to the global coordinate system

  * dictionary constructor w/o name uses the typeName

  * the coordinateSystem now has a coordinateRotation,
    use coordinateRotation constructors instead of calculating any
    rotations ourselves

  * allow assigment from dictionary, automatically descend into a
    'coordinateSystem' sub-dictionary
    This simplifies the addition to other dictionary constructors
    (eg, porousZone) without requiring a flat structure or special
    parsing within the constructor.
    eg,

        Foam::porousZone::porousZone(const fvMesh& mesh, Istream& is)
        :
            mesh_(mesh),
            name_(is),
            dict_(is),
            cellZoneID_(mesh_.cellZones().findZoneID(name_)),
            csys_(dict_),
            C0_(0),
            C1_(0),
            D_("D", dimensionSet(0, -2, 0, 0, 0), tensor::zero),
            F_("F", dimensionSet(0, -1, 0, 0, 0), tensor::zero)
        {
            ...
        }

  * could consider eliminating Rtr_ member and just use R_.T() instead

  * add hook in New() for type 'coordinateSystem'

------------------------

cartesianCS.C
cartesianCS.H

  * eliminate redundant virtual functions

------------------------

cylindricalCS.H

  * include coordinateSystem.H and not cartesianCS.H


------------------------

coordinateSystems.C
coordinateSystems.H

  * provide a means to access an invariant set of coordinate systems
