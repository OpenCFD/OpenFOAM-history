MEJ: breakdown of differences between our dev and foundation dev:

General:
- headerOk() -> typeHeaderOk<IOdictionary>()


application/solvers/
- added documentation to headers
- remove fvOptions constrain on p,rho (HGW)
- compressible solvers: pEqn.H transonic (HGW)

- potentialFoam: renaming of phi
- PDRFoam: avoid double registration
- rhoCentralDyMFoam: rewrite for general dynamic mesh (HGW)

- dsmcDyMFoam: new solver (HGW)
- dnsFoam: use pimpleControl HGW)
- mhdFoam: use pimpleControl (HGW)
- buoyantSimpleFoam: handle incompressible equation of state
- pisoFoam: added variable timestep

- coalChemistryFoam: basicSpecieMixture (HGW)
- sprayDyMFoam: new solver (HGW)
- sprayEngineFoam: use pEqn.H from sprayDyMFoam (HGW)

(multiPhase: most recent changes are HGW)
- multiPhaseInterFoam: avoid double reg (HGW)
- driftFluxFoam: avoid double reg (HGW)
- interDyMFoam: incompressibleCorrectPhi (HGW)
- interMixingFoam: threePhaseInterfaceProperties (HGW)
- all interFoam: added fvOptions (HGW)
- removed porousInterFoam
- interPhaseChangeDyMFoam: avoid double registration (HGW)
- twoPhaseEulerFoam/
    kineticTheoryModel: avoid double registration (HGW)
    phaseModel: avoid double registration (HGW)
- multiPhaseEulerFoam: re-use of contErr (HGW)

applications/test/
    FieldMapper: new test
    GlobalIOField: new test
    LduMatrix: use pimpleControl (HGW)
    meshToMesh: new test
    PisoFoam: use pimpleControl (HGW)

applications/utilities/
- extrudeMesh: extrusion into correct faceZone
- foamyHexMesh: specification of decomposeParDict location
- snappyHexMesh: specification of decomposeParDict location
- checkMesh: optionally reconstruct faceSets&cellSets to Ensight or vtk file
- renumberMesh: renumber faceSets,cellSets, pointSets
- splitMeshRegions: negate flux on exposed faces
- subsetMesh: handle dimensionedFields, have optional automatic patch assignment
- foamHelp: added help for solvers
- decomposePar: specification of decomposeParDict location
- reconstructPar: reconstruct refinement data
- redistributePar: decompose&reconstruct mesh and results
- foamToEnsight: correct handling of symmTensor, handling dimensionedFields
- foamToVTK: handling dimensionedFields
- paraFoam: handling dimensionedFields, building in binary directory
- execFlowFunctionObjects: option to not read fields
- sample: optional limiting of surfaces by bounding box
- applyBoundaryLayer: handle compressible flow
- createZeroDirectory: field setup tool
- mapFields: parallel mapping of all fields of an fvPatchField
- viewFactorsGen: cleaned up input and output
- surfacePatch: old surfaceAutoPatch. Various methods to re-patch bits of surface
- surfaceBooleanFeatures: use CGAL for intersections
- surfaceCheck: wrie zoning information (in vtk)
- surfaceInflate: new application, inflates surface according to surface normal


bin/
- CleanFunctions: added cleaning of snappy files
- doxyFilter-table.awk: updated CSS tables
- foamLog: added deltaT and Interface Courant number and multi-region support
- RunFunctions: naming of log file: runApplication -l <log>

etc/
- settings,bashrc: removed support for gamma
- etc/templates: support for createZeroDirectory

src/combustionModel/
- combustionModel with phaseName

src/conversion/
- ensightParts: fixed symmTensor ordering

src/dynamicMesh/
- fvMeshAdder: support for dimensioned fields (e.g. in redistributePar)
- fvMeshDistribute: support for flipping faces
- motionSolver: velocityDisplacement: wrapper around displacementMotionSolver
- pointSmoothers: library of motion smoothers (used in snappyHexMesh)
- addPatchCellLayer: support for extruding zones
- extendedEdgeMesh: support for cutting edgeMeshes

src/fileFormats/
- ensightSetWriter: generalised symmTensor handling

src/finiteVolume/
- rhoEqn: removed rho fvOptions (HGW)
- correctPhi: abstracted out correct phi (HGW)
- pimpleControl: optional algorithmName (HGW)
- turbulentDFSEMInlet: turbulence generating inlet bc
- uniformFixedGradient: evaluate at reading (HGW)
- fvPatchField: support for distributed mapping (redistributePar)
- fvMeshSubset: moved to dynamicMesh
- upwind: avoid double registration (HGW)
- volPointInterpolation: support for dimensionedInternalFields

src/fvMotionSolvers/
- displacementMotionSolver: add construct-from-components
- displacementPointSmoothingMotionSolver: new: use of pointSmoothers as motionSolver
- displacementSBRStress: avoid double reg (HGW)
- surfaceAlignedSBRStress: new: solve SBRStress with source term to force
    alignment with surface

src/fvOptions/
- velocityDampingConstraint: new: velocity damping for steady flows
- directionalPressureGradientExplicitSource: new: directional pressure drop (e.g. DarcyForchmeier)

src/lagrangian/
- IOPosition: use of particle::writePosition instead of particle::write (HGW)
- particle*:  ,,
- particleTemplates: re-use DynamicList storage
- passiveParticle: added iNew constructor
- DSMCBaseCloud: renamed from DsmcBaseCloud
- DSMCCloud: added mapping support (HGW)
- dsmcParcel: added writePosition (HGW)
- FreeStream: added mapping support (HGW)
- Inflow:       ,,
- cloudSolution: added max deltaT
- ThermoCloud: always read radiation keyword
- CloudToVTK: new cloudFunctionObject
- collidingParcel: reset keepParticle flag
- CollidingParcelIO: struct packing (HGW)
- KinematicParcel: use cloudSolution for timestep control; add hook for postprocessing
- KinematicParcelIO: struct packing (HGW)
- MPPICParcelIO: struct packing (HGW)
- ReactingMultiphaseParcel: update properties due to change in mass after evap
- ReactingMultiphaseParcelIO: struct packing
- ReactingParcel: update properties due to change in mass after evap
- ReactingParcelIO: struct packing
- ThermoParcel: Interpolate current temperature
- ThermoParcelIO: struct packing
- CloudToVTK: new CloudFunctionObject for postprocessing
- ParticleCollector: allow options for writer
- ConeInection: corrected number of particles
- InectionModel: added optional injector ID
- PatchInteractionModel: support for stats on escaped particles
- AveragingMethod: reuse dynamic list storage
- CompositionModel: support for clouds with differing composition
- LiquidEvaporation: pass in local composition
- LiquidEvaporationBoil: pass in local composition
- MoleculeIO: struct packing
- solidParticleIO: struct packing
- SprayParcel: support for differing composition

src/mesh/
- autoHexMesh: lots
- offsetSurface: new extrusion model

src/meshTools
- AMIInterpolation: support for flipping face quantities, more accurat remote processor representation
- coordinateRotation: clone support
- mappedPatchBase: support for flipping face quantities
- momentOfInertia: support for parallel operation
- primitiveMeshGeometry: up to date with primitiveMesh calculation
- localPointRegion: support for baffles
- searchableRotatedBox: searchableBox with arbitrary orientation
- triSurfaceMesh: speed up inside/outside test
- tetOverlapVolume: cleanup, using tetrahedron

src/ODE:
- seulex.C: changed underflow check (HGW)

src/OpenFOAM:
- HashTable: added clone() functionality
- Map: added clone() functionality
- UPtrList: added construct from PtrList
- codeStream: cleanup of master-only reading
- includeEntry: add monitoring of included files
- includeIfPresentEntry: add monitoring of included files
- dictionary: fix topDict()
- functionObjectFile: abstract write precision setting
- functionObjectList: support for restarting (reading state dictionary)
- outputFilterControl: support for execution on end
- IOobject: rewritten handling of headerOk() - is now type specific
- CompactIOList: check for overflow when reading
- GlobalIOList, GlobalIOField: versions of IOList,IOField that support master-only reading
- IOdictionary: handling master-only reading
(localIOdictionary: new: processor-local dictionary)
- IOMap: support READ_IF_MODIFIED
- IOPtrList: support READ_IF_MODIFIED
- regIOobject: monitoring of multiple files; master-only reading for any object
- Time: monitoring of included files
- DimensionedField: fixed stealing of registration (HGW)
- Field: support for distributed mapping and face flipping
- FieldMapper:          ,,
- GeometricField: optionally suppress reading old time field
- UniformDimensionedField: support for re-reading
- argList: support for naming of decomposeParDict
- OSspecific: optionally do not follow symbolic links
- matchPoints: ignore points according to pointNormal
- globalIndex: support for clone
- polyMeshTetDecomposition: pass in storage for tetIndices for efficiency
- processorPolyPatch: calculate correct matching tolerance
- polyPatch: added construct from components (including patchGroups)
- polyMesh: re-read patchGroups from boundary file; support for merging points when mapping oldPoints
- PrimitivePatch: support for clone
- primitiveMesh: optionally run with <2.3.1 clipping of pyramid volume
- plane: construct null
- triangle: added templated clipping
- DataEntry/Constant: added construct from components
- DataEntry/Table: correct construct from dictionary
- globalIndexAndTransform: added construct from components
- scalar: added CBRTVGREAT, CBRTVSMALL
- fileName: optionally disable automatic link following
- tensor: cleaned up eigenVector calculation

src/OSspecific/
- fileStat: optionally disable automatic link following

src/decompose/
- decompositionModel: MeshObject around decomposeParDict+decompositionModel
- decompositionConstraints: library of decomposition constraints
- distributedTriSurfaceMesh: use decompositionModel
 -processorMeshes: avoid double registration (HGW)

src/postProcessing/
- all functionObjects that generate a field: specification of field name
- all functionObjects: updated header
- all functionObjects: optional supression of stdout

- cloudInfo: print Dmax, D10, D32
- fieldAveraging: restart averaging
- fieldMinMax: calculate on master only
- cellSource/faceSource: correct handling of parallel running
- fieldValueDelta: moved operation to execute&end (from write)
- nearWallFields: cleanup
- readFields: register fields
- regionSizeDistribution: cleanup
- streamLine, wallBoundedStreamline: cleanup; optional clipping of generated tracks
- forceCoeffs, forces: write force and moment (coefficients) as fields
- graphics: new: postprocessing functionObjects
- runTimeControl: new: end calculation based on user input
- fluxSummary: new: summary of fluxes


src/Pstream/
- removed GAMMA

src/regionCoupled/
- energyRegionCoupledFvPatchScalarField: extraneous printing
- filmPyrolysisRadiativeCoupledMixed: construct underlying coupling with fluidThermo
- inclinedFilmNusseltHeight,
  inclinedFilmNusseltInletVelocity,
  alphatFilmWallFunction: specification of film name
- kinematicSingleLayer: limit Courant number in film only
- liquidFilmThermo: use field algebra
- thermocapillaryForce: correct for alpha
- InjectionModelList: write only if size()
- thixotropicViscosity: only apply on 'covered' faces
- thermoSingleLayer: renamed source field

src/sampling/
- meshToMesh: support for distributed mapping (all fields of fvPatchField); support for 2nd order (not on boundaries).
- faceOnlySet, uniformSet: fix moving mesh for tracks outside mesh
- patchSeedSet: optional user-provided face centres
- distanceSurface,isoSurface,isoSurfaceCell: consistent normal orientation, optional clipping
- sampledTriSurfaceMesh: speed up inside/outside on closed surfaces
- all writers (vtk, dx, ensight etc): cleanup
- ensightSurfaceWriter: optionally collate multiple time steps

src/sixDofRigidBodyMotion/
- constraints, restraints: fixed namespace comment

src/thermoPhysicalModels/
- fluidThermo: derive from compressibleTransportModel; return tmp instead of ref (HGW)
- heThermo: avoid double reg, construct mixture with phaseName
- psiThermos: instantiate Boussinesq thermos
- basicChemistryModel: add groupname; added number of reactions and species to API
- chemistryModel: add reactions
- psiChemistryModel,chemistrySolver,EulerImplicit, noChemostrySolver: add phasename
- constant,Gulders,GuldersEGR.RaviPetersen: avoid double reg
- liquidMixtureProperties: stabilise division

- radiation: removed radiationCoupledBase. Specification through boundaryRadiationProperties
- boundaryRadiationProperties: meshObject to specify boundary properties
- solarLoad, solarCalculator: model for solar load.
- fvDom, viewFactor: adapted for solar load
- multiBandSolidAbsorptionEmission: new absorption model
- transmissivityModel: new: run time selection of transmissivity on boundary

- basicCombustionMixture: level for basicSpecieMixture with combustion (HGW)
- basicSpecieMixture: common level for mixture of species (HGW)
- all mixtures: supply phaseName
- SLGThermo: requires basicSpecieMixture
- basicSolidChemistryModel: specify phaseName
- pyrolysisChemistryModel: use nComponents instead of nSpecie; avoid double reg
- solidChemistryModel: specify phaseName
- Boussinesq: new: equation of state

src/topoChangedFvMesh/
- dynamicMotionSolverTopoFvMesh: new: support for mesh motion and mesh changes

src/triSurface/
- readNAS: added free form format
- readOBJ: fixed reading empty lines
- surfacePatchList: master-only reading

src/turbulenceModels
- kLowReWallFunction: removed  double writing of value
- externalHeatFluxTemperature: renamed enum names to be consistent
- humidityTemperatureCoupledMixed: new: evaporation, condensation bc
- turbulentHeatFluxTemperature: default to use fluidThermo
- turbulentTemperatureCoupledBaffleMixed: default to use fluidThermo
- turbulentTemperatureRadCoupledBaffleMixed: default to use fluidThermo
- porousBafflePressure: use DataEntry for coefficients; handle inviscid flow (potentialFoam)
- compressibleTurbulenceModels.C: instantiate based on transportModel, not thermo type





