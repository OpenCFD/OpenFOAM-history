/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2009-2009 OpenCFD Ltd.
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

\*---------------------------------------------------------------------------*/

#include "pqPV3FoamReaderPanel.h"

// QT
#include <QGridLayout>
#include <QCheckBox>
#include <QLabel>
#include <QLayout>
#include <QString>
#include <QtDebug>

// Paraview<->QT UI
#include "pqAnimationScene.h"
#include "pqApplicationCore.h"
#include "pqPipelineRepresentation.h"
#include "pqServerManagerModel.h"
#include "pqView.h"

// Paraview Server Manager
#include "vtkSMDoubleVectorProperty.h"
#include "vtkSMIntVectorProperty.h"
#include "vtkSMProperty.h"
#include "vtkSMSourceProxy.h"


// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

pqPV3FoamReaderPanel::pqPV3FoamReaderPanel
(
    pqProxy *proxy,
    QWidget *p
)
:
    pqAutoGeneratedObjectPanel(proxy, p),
    sourceProxy_(vtkSMSourceProxy::SafeDownCast(this->proxy()))
{
    // create first sublayout (at top of the panel)
    QGridLayout *sect1 = new QGridLayout();
    this->PanelLayout->addLayout(sect1, 0, 0, 1, -1);


    // checkbox for caching mesh
    CacheMesh_ = new QCheckBox("Cache Mesh");
    CacheMesh_->setChecked(true);

    // checkbox for caching mesh
    ShowPatchNames_ = new QCheckBox("Show Patch Names");
    ShowPatchNames_->setChecked(false);

    connect
    (
        CacheMesh_,
        SIGNAL(stateChanged(int)),
        this,
        SLOT(CacheMeshToggled())
    );

    connect
    (
        ShowPatchNames_,
        SIGNAL(stateChanged(int)),
        this,
        SLOT(ShowPatchNamesToggled())
    );

    sect1->addWidget(CacheMesh_);
    sect1->addWidget(ShowPatchNames_);


    // immediate update on the Server Manager side
    vtkSMIntVectorProperty::SafeDownCast
    (
        sourceProxy_->GetProperty("UiCacheMesh")
    )->SetImmediateUpdate(true);
    vtkSMIntVectorProperty::SafeDownCast
    (
        sourceProxy_->GetProperty("UiShowPatchNames")
    )->SetImmediateUpdate(true);
}


// * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * * //

void pqPV3FoamReaderPanel::CacheMeshToggled()
{
    vtkSMIntVectorProperty::SafeDownCast
    (
        sourceProxy_->GetProperty("UiCacheMesh")
    )->SetElement(0, CacheMesh_->isChecked());
}


void pqPV3FoamReaderPanel::ShowPatchNamesToggled()
{
    vtkSMIntVectorProperty::SafeDownCast
    (
        sourceProxy_->GetProperty("UiShowPatchNames")
    )->SetElement(0, ShowPatchNames_->isChecked());

    // update the active view
    if (this->view())
    {
        this->view()->render();
    }
    // OR: update all views
    // pqApplicationCore::instance()->render();
}


// ************************************************************************* //
