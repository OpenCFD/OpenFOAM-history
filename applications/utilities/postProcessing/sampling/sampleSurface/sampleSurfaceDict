/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.0                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;

    root            "/home/penfold/mattijs/foam/mattijs2.1/run/icoFoam";
    case            "cavity";
    instance        "system";
    local           "";

    class           dictionary;
    object          sampleDict;
}


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


// Output format. Choice of
//      foamFile    : separate points, faces and values file
//      dx          : DX scalar or vector format
//      vtk         : VTK ascii format
//      raw         : x y z value format for use with e.g. gnuplot 'splot'.
//      stl         : ascii stl. Does not contain values!
surfaceFormat vtk;


// interpolationScheme : choice of
//	cell            : use cell-centre value only; constant over cells
//	cellPoint       : use cell-centre and vertex values
//	cellPointFace   : use cell-centre, vertex and face values.
// 1] vertex values determined from neighbouring cell-centre values
// 2] face values determined using the current face interpolation scheme
//    for the field (linear, gamma, etc.)
interpolationScheme cellPointFace;


// sampling definition: choice of
//      interpolatedPlane   : values on plane defined by point, normal.
//                            One value per vertex using above 
//                            interpolationScheme
//      constantPlane       : values on plane defined by point, normal.
//                            One (cell centre) value per triangle
//      constantPatch       : values on patch. One (face centre) value
//                            per triangle.
surfaces
(
    constantPlane
    {
        name    constantPlane;

        basePoint   (0.05 0.05 0.005);
        normalVector  (0.1 0.1 1);

        // Optional: whether to leave as faces or triangulate (=default)
        triangulate false;
    }

    interpolatedPlane
    {
        name    interpolatedPlane;

        basePoint   (0.05 0.05 0.005);
        normalVector  (0.1 0.1 1);

        triangulate false;
    }


    constantPatch
    {
        name movingWall_constant;
        patchName movingWall;

        triangulate false;
    }

    interpolatedPatch
    {
        name movingWall_interpolated;
        patchName movingWall;

        triangulate false;
    }

    constantIsoSurface
    {
        name constantIso;
        field p;
        value 0;
    }
    interpolatedIsoSurface
    {
        name someIso;
        field p;
        value 0;
    }
);


// Fields to sample. Note: need to include isoSurface fields.
fields
(
    p
    U
);


// ************************************************************************* //
