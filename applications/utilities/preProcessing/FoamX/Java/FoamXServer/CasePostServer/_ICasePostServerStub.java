package FoamXServer.CasePostServer;


/**
* FoamXServer/CasePostServer/_ICasePostServerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.1"
* from FoamX.idl
* 02 April 2007 09:53:40 o'clock BST
*/


// ---------------------------------------------------------------------
public class _ICasePostServerStub extends org.omg.CORBA.portable.ObjectImpl implements FoamXServer.CasePostServer.ICasePostServer
{


  // Attributes.
  public String caseRoot ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_caseRoot", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return caseRoot (        );
            } finally {
                _releaseReply ($in);
            }
  } // caseRoot

  public String caseName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_caseName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return caseName (        );
            } finally {
                _releaseReply ($in);
            }
  } // caseName

  public int nProcs ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_nProcs", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return nProcs (        );
            } finally {
                _releaseReply ($in);
            }
  } // nProcs


  // Time-steps.
  public String[] availableTimeSteps ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_availableTimeSteps", true);
                $in = _invoke ($out);
                String $result[] = FoamXServer.StringListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return availableTimeSteps (        );
            } finally {
                _releaseReply ($in);
            }
  } // availableTimeSteps


  // Set database
  public void setTime (String timeName, int timeIndex) throws FoamXServer.FoamXError, FoamXServer.FoamXIOError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setTime", true);
                $out.write_string (timeName);
                $out.write_long (timeIndex);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FoamXServer/FoamXError:1.0"))
                    throw FoamXServer.FoamXErrorHelper.read ($in);
                else if (_id.equals ("IDL:FoamXServer/FoamXIOError:1.0"))
                    throw FoamXServer.FoamXIOErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setTime (timeName, timeIndex        );
            } finally {
                _releaseReply ($in);
            }
  } // setTime


  // Slave variant
  public void setTimeSlave ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setTimeSlave", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setTimeSlave (        );
            } finally {
                _releaseReply ($in);
            }
  } // setTimeSlave


  // Get patchnames over all domains
  public String[] getPatchNames () throws FoamXServer.FoamXError, FoamXServer.FoamXIOError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPatchNames", true);
                $in = _invoke ($out);
                String $result[] = FoamXServer.StringListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FoamXServer/FoamXError:1.0"))
                    throw FoamXServer.FoamXErrorHelper.read ($in);
                else if (_id.equals ("IDL:FoamXServer/FoamXIOError:1.0"))
                    throw FoamXServer.FoamXIOErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPatchNames (        );
            } finally {
                _releaseReply ($in);
            }
  } // getPatchNames


  // Slave variant
  public void getPatchNamesSlave ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPatchNamesSlave", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getPatchNamesSlave (        );
            } finally {
                _releaseReply ($in);
            }
  } // getPatchNamesSlave


  // Get fieldNames
  public String[] getFieldNames (String type) throws FoamXServer.FoamXError, FoamXServer.FoamXIOError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFieldNames", true);
                $out.write_string (type);
                $in = _invoke ($out);
                String $result[] = FoamXServer.StringListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FoamXServer/FoamXError:1.0"))
                    throw FoamXServer.FoamXErrorHelper.read ($in);
                else if (_id.equals ("IDL:FoamXServer/FoamXIOError:1.0"))
                    throw FoamXServer.FoamXIOErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFieldNames (type        );
            } finally {
                _releaseReply ($in);
            }
  } // getFieldNames


  // Bounding box
  public void getMeshBb (FoamXServer.Point3Holder min, FoamXServer.Point3Holder max) throws FoamXServer.FoamXError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getMeshBb", true);
                $in = _invoke ($out);
                min.value = FoamXServer.Point3Helper.read ($in);
                max.value = FoamXServer.Point3Helper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FoamXServer/FoamXError:1.0"))
                    throw FoamXServer.FoamXErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getMeshBb (min, max        );
            } finally {
                _releaseReply ($in);
            }
  } // getMeshBb


  // Slave variant
  public void getMeshBbSlave ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getMeshBbSlave", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getMeshBbSlave (        );
            } finally {
                _releaseReply ($in);
            }
  } // getMeshBbSlave


  // Patch mesh
  public void getPatchMesh (String patchName, double creaseAngle, FoamXServer.FloatListHolder points, FoamXServer.LongListHolder edges) throws FoamXServer.FoamXError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPatchMesh", true);
                $out.write_string (patchName);
                $out.write_double (creaseAngle);
                $in = _invoke ($out);
                points.value = FoamXServer.FloatListHelper.read ($in);
                edges.value = FoamXServer.LongListHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FoamXServer/FoamXError:1.0"))
                    throw FoamXServer.FoamXErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getPatchMesh (patchName, creaseAngle, points, edges        );
            } finally {
                _releaseReply ($in);
            }
  } // getPatchMesh


  // Slave variant
  public void getPatchMeshSlave ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPatchMeshSlave", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getPatchMeshSlave (        );
            } finally {
                _releaseReply ($in);
            }
  } // getPatchMeshSlave


  // Cut mesh
  public void getCutMesh (float[] basePoint, float[] normal, FoamXServer.FloatListHolder points, FoamXServer.LongListHolder edges) throws FoamXServer.FoamXError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getCutMesh", true);
                FoamXServer.Point3Helper.write ($out, basePoint);
                FoamXServer.Point3Helper.write ($out, normal);
                $in = _invoke ($out);
                points.value = FoamXServer.FloatListHelper.read ($in);
                edges.value = FoamXServer.LongListHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FoamXServer/FoamXError:1.0"))
                    throw FoamXServer.FoamXErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getCutMesh (basePoint, normal, points, edges        );
            } finally {
                _releaseReply ($in);
            }
  } // getCutMesh


  // Slave variant
  public void getCutMeshSlave ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getCutMeshSlave", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getCutMeshSlave (        );
            } finally {
                _releaseReply ($in);
            }
  } // getCutMeshSlave


  // Cut mesh outline
  public void getCutMeshOutline (float[] basePoint, float[] normal, FoamXServer.FloatListHolder points, FoamXServer.LongListHolder edges) throws FoamXServer.FoamXError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getCutMeshOutline", true);
                FoamXServer.Point3Helper.write ($out, basePoint);
                FoamXServer.Point3Helper.write ($out, normal);
                $in = _invoke ($out);
                points.value = FoamXServer.FloatListHelper.read ($in);
                edges.value = FoamXServer.LongListHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FoamXServer/FoamXError:1.0"))
                    throw FoamXServer.FoamXErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getCutMeshOutline (basePoint, normal, points, edges        );
            } finally {
                _releaseReply ($in);
            }
  } // getCutMeshOutline


  // Slave variant
  public void getCutMeshOutlineSlave ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getCutMeshOutlineSlave", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getCutMeshOutlineSlave (        );
            } finally {
                _releaseReply ($in);
            }
  } // getCutMeshOutlineSlave


  // Triangulate and sample patch
  public void getTriPatch (String fieldName, String patchName, FoamXServer.FloatListHolder points, FoamXServer.LongListHolder triFaces, FoamXServer.FloatListHolder values) throws FoamXServer.FoamXError, FoamXServer.FoamXIOError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTriPatch", true);
                $out.write_string (fieldName);
                $out.write_string (patchName);
                $in = _invoke ($out);
                points.value = FoamXServer.FloatListHelper.read ($in);
                triFaces.value = FoamXServer.LongListHelper.read ($in);
                values.value = FoamXServer.FloatListHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FoamXServer/FoamXError:1.0"))
                    throw FoamXServer.FoamXErrorHelper.read ($in);
                else if (_id.equals ("IDL:FoamXServer/FoamXIOError:1.0"))
                    throw FoamXServer.FoamXIOErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getTriPatch (fieldName, patchName, points, triFaces, values        );
            } finally {
                _releaseReply ($in);
            }
  } // getTriPatch


  // Slave variant
  public void getTriPatchSlave ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTriPatchSlave", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getTriPatchSlave (        );
            } finally {
                _releaseReply ($in);
            }
  } // getTriPatchSlave


  // Triangulate and sample patch
  public void getTriPatchVec (String fieldName, String patchName, FoamXServer.FloatListHolder points, FoamXServer.LongListHolder triFaces, FoamXServer.FloatListHolder values) throws FoamXServer.FoamXError, FoamXServer.FoamXIOError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTriPatchVec", true);
                $out.write_string (fieldName);
                $out.write_string (patchName);
                $in = _invoke ($out);
                points.value = FoamXServer.FloatListHelper.read ($in);
                triFaces.value = FoamXServer.LongListHelper.read ($in);
                values.value = FoamXServer.FloatListHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FoamXServer/FoamXError:1.0"))
                    throw FoamXServer.FoamXErrorHelper.read ($in);
                else if (_id.equals ("IDL:FoamXServer/FoamXIOError:1.0"))
                    throw FoamXServer.FoamXIOErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getTriPatchVec (fieldName, patchName, points, triFaces, values        );
            } finally {
                _releaseReply ($in);
            }
  } // getTriPatchVec


  // Slave variant
  public void getTriPatchVecSlave ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTriPatchVecSlave", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getTriPatchVecSlave (        );
            } finally {
                _releaseReply ($in);
            }
  } // getTriPatchVecSlave


  // Cutplane and sample
  public void cutPlane (String fieldName, float[] basePoint, float[] normal, FoamXServer.FloatListHolder points, FoamXServer.LongListHolder triFaces, FoamXServer.FloatListHolder values) throws FoamXServer.FoamXError, FoamXServer.FoamXIOError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("cutPlane", true);
                $out.write_string (fieldName);
                FoamXServer.Point3Helper.write ($out, basePoint);
                FoamXServer.Point3Helper.write ($out, normal);
                $in = _invoke ($out);
                points.value = FoamXServer.FloatListHelper.read ($in);
                triFaces.value = FoamXServer.LongListHelper.read ($in);
                values.value = FoamXServer.FloatListHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FoamXServer/FoamXError:1.0"))
                    throw FoamXServer.FoamXErrorHelper.read ($in);
                else if (_id.equals ("IDL:FoamXServer/FoamXIOError:1.0"))
                    throw FoamXServer.FoamXIOErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                cutPlane (fieldName, basePoint, normal, points, triFaces, values        );
            } finally {
                _releaseReply ($in);
            }
  } // cutPlane


  // Slave variant
  public void cutPlaneSlave ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("cutPlaneSlave", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                cutPlaneSlave (        );
            } finally {
                _releaseReply ($in);
            }
  } // cutPlaneSlave


  // Cutplane and sample
  public void cutPlaneVec (String fieldName, float[] basePoint, float[] normal, FoamXServer.FloatListHolder points, FoamXServer.LongListHolder triFaces, FoamXServer.FloatListHolder values) throws FoamXServer.FoamXError, FoamXServer.FoamXIOError
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("cutPlaneVec", true);
                $out.write_string (fieldName);
                FoamXServer.Point3Helper.write ($out, basePoint);
                FoamXServer.Point3Helper.write ($out, normal);
                $in = _invoke ($out);
                points.value = FoamXServer.FloatListHelper.read ($in);
                triFaces.value = FoamXServer.LongListHelper.read ($in);
                values.value = FoamXServer.FloatListHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FoamXServer/FoamXError:1.0"))
                    throw FoamXServer.FoamXErrorHelper.read ($in);
                else if (_id.equals ("IDL:FoamXServer/FoamXIOError:1.0"))
                    throw FoamXServer.FoamXIOErrorHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                cutPlaneVec (fieldName, basePoint, normal, points, triFaces, values        );
            } finally {
                _releaseReply ($in);
            }
  } // cutPlaneVec


  // Slave variant
  public void cutPlaneVecSlave ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("cutPlaneVecSlave", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                cutPlaneVecSlave (        );
            } finally {
                _releaseReply ($in);
            }
  } // cutPlaneVecSlave


  //- Lifetime management.
  public void close ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("close", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                close (        );
            } finally {
                _releaseReply ($in);
            }
  } // close

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:FoamXServer/CasePostServer/ICasePostServer:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _ICasePostServerStub
