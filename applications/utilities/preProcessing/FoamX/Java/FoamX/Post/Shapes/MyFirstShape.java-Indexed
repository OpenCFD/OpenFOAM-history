/*
 */

import com.sun.j3d.utils.geometry.GeometryInfo;
import com.sun.j3d.utils.geometry.NormalGenerator;
import com.sun.j3d.utils.geometry.Stripifier;
import com.sun.j3d.utils.geometry.Triangulator;

import javax.media.j3d.*;
import javax.vecmath.Color3f;
import javax.vecmath.Point2f;
import javax.vecmath.Point3f;
import javax.vecmath.Point3d;
import javax.vecmath.Vector3f;

public class MyFirstShape extends Shape3D
{
    public MyFirstShape()
    {
        Point3d[] coords = new Point3d[10];
        coords[0] = new Point3d(0,   0, 0);
        coords[1] = new Point3d(1,   0, 0);
        coords[2] = new Point3d(1,   1, 0);
        coords[3] = new Point3d(0.5, 2, 0);
        coords[4] = new Point3d(0,   1, 0);

        coords[5] = new Point3d(0,   0, 1);
        coords[6] = new Point3d(1,   0, 1);
        coords[7] = new Point3d(1,   1, 1);
        coords[8] = new Point3d(0.5, 2, 1);
        coords[9] = new Point3d(0,   1, 1);

        // Colours
        Color3f[] colors = new Color3f[6];

	    colors[0] = new Color3f(1.0f, 0.0f, 0.0f); //(red)
	    colors[1] = new Color3f(0.0f, 1.0f, 0.0f); //(green)
	    colors[2] = new Color3f(0.0f, 0.0f, 1.0f); //(blue)
	    colors[3] = new Color3f(1.0f, 1.0f, 0.0f); //(yellow)
	    colors[4] = new Color3f(1.0f, 0.0f, 1.0f); //(magenta)
	    colors[5] = new Color3f(0.0f, 1.0f, 1.0f); //(cyan)

        // Normals
        Vector3f[] normals = new Vector3f[7];

	    normals[0] = new Vector3f( 0.0f,  0.0f, -1.0f); //(red)
	    normals[1] = new Vector3f( 0.0f,  0.0f,  1.0f); //(green)
	    normals[2] = new Vector3f(-1.0f,  0.0f,  0.0f); //(blue)
	    normals[3] = new Vector3f(-1.0f,  1.0f,  0.0f); //(yellow)
	    normals[4] = new Vector3f( 1.0f,  1.0f,  0.0f); //(magenta)
	    normals[5] = new Vector3f( 1.0f,  0.0f,  0.0f); //(cyan)
	    normals[6] = new Vector3f( 0.0f, -1.0f,  0.0f); //(cyan)

        // Toplogical storage
        int[] stripCounts = new int[7];
        int[] contourCounts = new int[7];
        int[] coordinateIndices = new int[48];
        int[] faceIndices = new int[48];

        // All singly connected contours
        for(int i = 0; i < contourCounts.length; i++)
        {
            contourCounts[i] = 1;
        }

        int verti = 0;

        // face0 - back
        for(int i = verti; i < verti + 9; i++)
        {
            faceIndices[i] = 0;
        }
        coordinateIndices[verti++] = 0;
        coordinateIndices[verti++] = 4;
        coordinateIndices[verti++] = 1;

        coordinateIndices[verti++] = 1;
        coordinateIndices[verti++] = 4;
        coordinateIndices[verti++] = 2;

        coordinateIndices[verti++] = 2;
        coordinateIndices[verti++] = 4;
        coordinateIndices[verti++] = 3;


        // face1 - front
        for(int i = verti; i < verti + 9; i++)
        {
            faceIndices[i] = 1;
        }
        coordinateIndices[verti++] = 5;
        coordinateIndices[verti++] = 6;
        coordinateIndices[verti++] = 9;

        coordinateIndices[verti++] = 9;
        coordinateIndices[verti++] = 6;
        coordinateIndices[verti++] = 7;

        coordinateIndices[verti++] = 7;
        coordinateIndices[verti++] = 8;
        coordinateIndices[verti++] = 9;

        // face2
        for(int i = verti; i < verti + 6; i++)
        {
            faceIndices[i] = 2;
        }
        coordinateIndices[verti++] = 0;
        coordinateIndices[verti++] = 5;
        coordinateIndices[verti++] = 9;
        coordinateIndices[verti++] = 9;
        coordinateIndices[verti++] = 4;
        coordinateIndices[verti++] = 0;

        // face3
        for(int i = verti; i < verti + 6; i++)
        {
            faceIndices[i] = 3;
        }
        coordinateIndices[verti++] = 4;
        coordinateIndices[verti++] = 9;
        coordinateIndices[verti++] = 8;
        coordinateIndices[verti++] = 8;
        coordinateIndices[verti++] = 3;
        coordinateIndices[verti++] = 4;

        // face4
        for(int i = verti; i < verti + 6; i++)
        {
            faceIndices[i] = 4;
        }
        coordinateIndices[verti++] = 2;
        coordinateIndices[verti++] = 3;
        coordinateIndices[verti++] = 8;
        coordinateIndices[verti++] = 8;
        coordinateIndices[verti++] = 7;
        coordinateIndices[verti++] = 3;

        // face5
        for(int i = verti; i < verti + 6; i++)
        {
            faceIndices[i] = 5;
        }
        coordinateIndices[verti++] = 1;
        coordinateIndices[verti++] = 2;
        coordinateIndices[verti++] = 7;
        coordinateIndices[verti++] = 7;
        coordinateIndices[verti++] = 6;
        coordinateIndices[verti++] = 1;

        // face6
        for(int i = verti; i < verti + 6; i++)
        {
            faceIndices[i] = 6;
        }
        coordinateIndices[verti++] = 0;
        coordinateIndices[verti++] = 1;
        coordinateIndices[verti++] = 6;
        coordinateIndices[verti++] = 6;
        coordinateIndices[verti++] = 5;
        coordinateIndices[verti++] = 0;

        if (verti != coordinateIndices.length)
        {
            System.out.println("*** coordinateIndices not filled correctly");
        }


        IndexedTriangleArray ita = new IndexedTriangleArray
        (
            coords.length,
            IndexedTriangleArray.COORDINATES | IndexedTriangleArray.COLOR_3,
            coordinateIndices.length
        );

        ita.setCoordinateIndices(0, coordinateIndices);
        ita.setCoordinates(0, coords);
        ita.setColorIndices(0, faceIndices);
        ita.setColors(0, colors);
        ita.setNormalIndices(0, faceIndices);
        ita.setNormals(0, normals);

        ita.setCapability(GeometryArray.ALLOW_COORDINATE_READ);
        ita.setCapability(IndexedGeometryArray.ALLOW_COORDINATE_INDEX_READ);
        ita.setCapability(GeometryArray.ALLOW_FORMAT_READ);
        ita.setCapability(GeometryArray.ALLOW_COUNT_READ);

        this.setGeometry(ita);
        this.setCapability(Shape3D.ALLOW_GEOMETRY_READ);
        this.setCapability(Shape3D.ALLOW_BOUNDS_READ);


//        System.out.println("format       :" + this.getVertexFormat());
//        System.out.println("indices coord:" + this.getInitialCoordIndex());
//        System.out.println("indices vert :" + this.getInitialVertexIndex());
//        int[] userData = new int[array.getVertexCount()];
//        for(int i = 0; i < userData.length; i++)
//        {
//            userData[i] = i;
//        }
//        this.setUserData(userData);

//
//        Point3d[] vertices = new Point3d[array.getVertexCount()];
//        for (int i = 0; i < vertices.length; i++)
//        {
//             vertices[i] = new Point3d();
//        }
//        array.getCoordinates(0, vertices);
//
//        for(int i = 0; i <vertices.length; i++)
//        {
//            System.out.println("    " + i + " -> " + vertices[i]);
//        }
    }
}
