/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      extrudeToRegionMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Name of region to create
region          liquidFilm;

// FaceZones to extrude
faceZones       (f0);

// FaceZone shadow
//faceZonesShadow (fBaffleShadow);

// Adapt the original mesh to have mapped patches at where the
// faceZones are?
// If true:
// - extruding internal faces: become baffles on mapped patches
// - extruding boundary faces: repatched to be on mapped patches
// If false: leave original mesh intact. Extruded mesh will still have
// mapped patch which might need to be adapted.
adaptMesh       true;

// Sample mode for inter-region communication
sampleMode      nearestPatchFace;

// Extrude 1D-columns of cells?
oneD            false;

// If oneD is true. Specify which boundary is wanted between the layers
//oneDPolyPatchType empty; //wedge


//- Extrusion model to use. The only logical choice is linearNormal?

//- Linear extrusion in normal direction
extrudeModel    linearNormal;

//- Linear extrusion in specified direction
// extrudeModel   linearDirection;

//- Wedge extrusion. If nLayers is 1 assumes symmetry around plane.
// extrudeModel   wedge;

//- Extrudes into sphere around (0 0 0)
// extrudeModel   linearRadial;

//- Extrudes into sphere with grading according to pressure (atmospherics)
// extrudeModel   sigmaRadial;

nLayers         10;

expansionRatio  0.9;

linearNormalCoeffs
{
    thickness       0.05;
}

wedgeCoeffs
{
    axisPt      (0 0.1 -0.05);
    axis        (-1 0 0);
    angle       360;  // For nLayers=1 assume symmetry so angle/2 on each side
}

linearDirectionCoeffs
{
    direction       (0 1 0);
    thickness       0.05;
}

linearRadialCoeffs
{
     R              0.1;
}

sigmaRadialCoeffs
{
    RTbyg           1;
    pRef            1;
    pStrat          1;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
