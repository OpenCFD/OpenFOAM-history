/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.5                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      sampleDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// interpolationScheme : choice of
//	cell            : use cell-centre value only; constant over cells
//	cellPoint       : use cell-centre and vertex values
//	cellPointFace   : use cell-centre, vertex and face values.
// 1] vertex values determined from neighbouring cell-centre values
// 2] face values determined using the current face interpolation scheme
//    for the field (linear, gamma, etc.)
interpolationScheme cellPointFace;

// setFormat : choice of
//      xmgr
//      jplot
//      gnuplot
//      raw
setFormat raw;

// Surface output format. Choice of
//      null        : suppress output
//      foamFile    : separate points, faces and values file
//      dx          : DX scalar or vector format
//      vtk         : VTK ascii format
//      raw         : x y z value format for use with e.g. gnuplot 'splot'.
//      stl         : ascii stl. Does not contain values!
surfaceFormat vtk;

// sampling definition:
//
// Dictionary with fields
//      type : type of sampling method
//      name : name of samples. Used e.g. as filename
//      axis : how to write point coordinate
//      ...  : depending on method
//
//
// sample: choice of
//      uniform             evenly distributed points on line
//      face                one point per face intersection
//      midPoint            one point per cell, inbetween two face intersections
//      midPointAndFace     combination of face and midPoint
//
//      curve               specified points, not nessecary on line, uses
//                          tracking
//      cloud               specified points, uses findCell
//
//
// axis: how to write point coordinate. Choice of
// - x/y/z: x/y/z coordinate only
// - xyz: three columns
//  (probably does not make sense for anything but raw)
// - distance: distance from start of sampling line (if uses line) or
//             distance from first specified sampling point
//
// type specific:
//      uniform, face, midPoint, midPointAndFace : start and end coordinate
//      uniform: extra number of sampling points
//      curve, cloud: list of coordinates
sets
(
    IN1
    {
        type        uniform;
        axis        y;

        start       (11.8224e-3 -1.0e-3 1.0e-8);
        end         (11.8224e-3  1.0e-3 1.0e-8);
        nPoints     100;
    }
    IN
    {
        type        uniform;
        axis        y;

        start       (12.0864e-3 -1.0e-3 1.0e-8);
        end         (12.0864e-3  1.0e-3 1.0e-8);
        nPoints     50;
    }
    M1
    {
        type        uniform;
        axis        y;

        start       (12.3424e-3 -0.147539e-3 1.0e-8);
        end         (12.3424e-3  0.147539e-3 1.0e-8);
        nPoints     50;
    }
    M2
    {
        type        uniform;
        axis        y;

        start       (12.6032e-3 -0.147539e-3 1.0e-8);
        end         (12.6032e-3  0.147539e-3 1.0e-8);
        nPoints     50;
    }
    OUT
    {
        type        uniform;
        axis        y;

        start       (12.8928e-3 -0.147539e-3 1.0e-8);
        end         (12.8928e-3  0.147539e-3 1.0e-8);
        nPoints     50;
    }

    IN1_GR1
    {
        type        uniform;
        axis        y;

        start       (11.778e-3 -1.0e-3 1.0e-8);
        end         (11.778e-3  1.0e-3 1.0e-8);
        nPoints     100;
    }
    OUT_GR1
    {
        type        uniform;
        axis        y;

        start       (13.14e-3 -2.0e-3 1.0e-8);
        end         (13.14e-3  2.0e-3 1.0e-8);
        nPoints     200;
    }
);

surfaces
();

// Fields to sample.
fields
(
//    magUMean
    UMeanx
);

// ************************************************************************* //
