#!/bin/sh

#
# FUNCTIONS
#
printUsage () {
cat <<EOF
Usage: $0
Quickly tests the tutorials and writes out the scheme/solver information

Options are:
-d         sets up a default scheme on all schemes
-h         help
EOF
}

newRunApplication () {
cat<<EOF
runApplication ()
{
    if [ -f \$2/log.\$1 ] ; then
        echo "$1 already run on $2: remove log file to run"
    else
        mv \$2/system/controlDict \$2/system/controlDict.org
        sed \\
        -e s/"\(startFrom[ \t]*\)\([0-9a-zA-Z.-]*\);"/"\1 latestTime;"/g \\
        -e s/"\(stopAt[ \t]*\)\([a-zA-Z]*\);"/"\1 nextWrite;"/g \\
        -e s/"\(writeControl[ \t]*\)\([a-zA-Z]*\);"/"\1 timeStep;"/g \\
        -e s/"\(writeInterval[ \t]*\)\([0-9a-zA-Z.-]*\);"/"\1 1;"/g \\
        \$2/system/controlDict.org > \$2/system/controlDict
        echo "Running \$1 on \$2"
        \$1 . \$2 > \$2/log.\$1 2>&1
    fi
}
EOF
}

setDefaultFvSchemes () {
cat<<EOF
gradSchemes { default Gauss linear; }
divSchemes 
{ 
    default Gauss linear;
    div(phi,fu_ft_h) Gauss multivariateSelection
    {
        fu upwind;
        ft upwind;
        h  upwind;
    };
    div(phi,ft_b_h_hu) Gauss multivariateSelection
    {
        fu upwind;
        ft upwind;
        b  upwind;
        h  upwind;
        hu upwind;
    };    
}
laplacianSchemes { default Gauss linear corrected; }
interpolationSchemes { default linear; }
snGradSchemes { default corrected; }
fluxRequired { default yes; }
EOF
}
#
# VARIABLE
#
MAIN_CONTROL_DICT=
: ${FOAM_DOT_DIR:=.$WM_PROJECT-$WM_PROJECT_VERSION}

for i in \
  $HOME/$FOAM_DOT_DIR \
  $HOME/.$WM_PROJECT/$WM_PROJECT_VERSION \
  $HOME/.$WM_PROJECT \
  $WM_PROJECT_DIR/etc \
  $WM_PROJECT_DIR/$FOAM_DOT_DIR \
  ;
do
  if [ -f "$i/controlDict" ]; then
     MAIN_CONTROL_DICT="$i/controlDict"
     break
  fi
done
TUTORIALS_DIR=.
TEST_RUN_DIR=../tutorialsTest
FV_SCHEMES=\
" \
    gradScheme \
    divScheme \
    laplacianScheme \
    interpolationScheme \
    snGradScheme \
    fluxRequired \
"
SCHEMES_FILE="FvSchemes"
SCHEMES_TEMP="FvSchemes.temp"
SOLVERS_FILE="FvSolution"
SOLVERS_TEMP="FvSolution.temp"
DEFAULT_SCHEMES=0

#
# OPTIONS
#
OPTS=`getopt hd $*`
if [ $? -ne 0 ] ; then
    echo "Aborting due to invalid option"
    printUsage
    exit 1
fi
eval set -- "$OPTS"
while [ $1 != -- ]; do
    case $1 in
        -d) DEFAULT_SCHEMES=1;;
        -h) printUsage; exit 1;;
    esac
    shift
done
shift

#
# MAIN
#

if [ -d "$TEST_RUN_DIR" ] ; then
    rm -rf $TEST_RUN_DIR
fi

echo "Modifying ${MAIN_CONTROL_DICT}"
cp ${MAIN_CONTROL_DICT} ${MAIN_CONTROL_DICT}.org
sed \
-e s/"\(fvSchemes[ \t]*\)\([0-9]\);"/"\1 1;"/g \
-e s/"\(fvSolution[ \t]*\)\([0-9]\);"/"\1 1;"/g \
${MAIN_CONTROL_DICT}.org > ${MAIN_CONTROL_DICT}

echo "Copying the tutorials"
cp -r ${TUTORIALS_DIR} ${TEST_RUN_DIR}

echo "Modifying the controlDicts to run only one time step"
cd ${TEST_RUN_DIR}

for CD in `find . -name "controlDict*"`
do 
    mv ${CD} ${CD}.org
    sed \
   -e s/"\(startFrom[ \t]*\)\([a-zA-Z]*\);"/"\1 latestTime;"/g \
    -e s/"\(stopAt[ \t]*\)\([a-zA-Z]*\);"/"\1 nextWrite;"/g \
    -e s/"\(writeControl[ \t]*\)\([a-zA-Z]*\);"/"\1 timeStep;"/g \
    -e s/"\(writeInterval[ \t]*\)\([0-9a-zA-Z.-]*\);"/"\1 1;"/g \
    ${CD}.org > ${CD}
done

mv RunFunctions RunFunctions.org
sed '/runApplication/,/\}/d' RunFunctions.org > RunFunctions
newRunApplication >> RunFunctions

if [ $DEFAULT_SCHEMES = 1 ] ; then
    echo "Modifying the fvSchemes to contain only default schemes"
    for FV_SC in `find . -name fvSchemes`
    do
        for S in $FV_SCHEMES
        do
            mv ${FV_SC} ${FV_SC}.org
            sed -e /"${S}"/,/$p/d ${FV_SC}.org > ${FV_SC}
        done
        setDefaultFvSchemes >> ${FV_SC}
    done
fi

./Allrun

sed -e :a -e '/\\$/N; s/\\\n//; ta' Allrun > temp
APPLICATIONS=`grep "applications=" temp | sed 's/applications=\"\([A-Za-z \t]*\)\"/\1/g'`

rm $SCHEMES_FILE > /dev/null 2>&1
for APP in $APPLICATIONS
do
    echo $APP >> $SCHEMES_FILE
    echo "$APP: " | tr -d "\n" >> $SOLVERS_FILE
    for ST in $FV_SCHEMES
    do
        rm $SCHEMES_TEMP > /dev/null 2>&1
        rm $SOLVERS_TEMP > /dev/null 2>&1
        echo "  ${ST}" >> $SCHEMES_FILE
        for LOG in `find ${APP} -name "log.${APP}"`
        do
            for S in `grep ${ST} ${LOG} | cut -d" " -f4`
            do
                echo "    ${S}" >> $SCHEMES_TEMP
            done
        echo `grep solver ${LOG} | cut -d" " -f4` >> $SOLVERS_TEMP
        done
        if [ -f $SCHEMES_TEMP ] ; then
            cat $SCHEMES_TEMP | sort -u >> $SCHEMES_FILE
        fi
    done
    cat $SOLVERS_TEMP | tr " " "\n" | sort -u | tr "\n" " " >> $SOLVERS_FILE
    echo "" >> $SOLVERS_FILE
done

mv ${MAIN_CONTROL_DICT}.org ${MAIN_CONTROL_DICT}
