/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Load the library containing the externalCoupled functionObject and the
// boundary conditions. Normally this is done through the functionObjectLibs
// but this is only executed at start of the time loop but this library
// also contains boundary conditions so these will not be known until then
libs            ("libjobControl.so");

application     buoyantSimpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         100;

deltaT          1;

writeControl    timeStep;

writeInterval   10;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
    readFields
    {
        // Where to load it from (if not already in solver)
        functionObjectLibs ("libjobControl.so");

        type            externalCoupled;

        // Directory to use for communication
        commsDir        "${FOAM_CASE}/comms";

        // Does external process start first
        initByExternal  true;

        // Additional output
        log             true;

        regions
        {
            // Region name
            region0
            {
                // Patch or patchGroup
                coupleGroup
                {
                    // Fields to output in commsDir
                    writeFields (T);
                    // Fields to read from commsDir
                    readFields  (T);
                }
            }
        }
    }
}


// ************************************************************************* //
