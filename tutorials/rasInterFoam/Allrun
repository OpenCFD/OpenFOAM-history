#!/bin/sh

# Get application name from directory
application=`basename $PWD`

# Find and source additional functions
tutorialPath=$PWD
while [ ! -f $tutorialPath/RunFunctions ]
do
    tutorialPath="$tutorialPath/.."
done
. $tutorialPath/RunFunctions



setDamBreakFine ()
{
    blockMeshDict="constant/polyMesh/blockMeshDict"
    controlDict="system/controlDict"        
    sed \
    -e s/"23 8"/"46 10"/g \
    -e s/"19 8"/"40 10"/g \
    -e s/"23 42\(.*\) 1 1)"/"46 76\1 2 1)"/g \
    -e s/"4 42\(.*\) 1 1)"/"4 76\1 2 1)"/g \
    -e s/"19 42\(.*\) 1 1)"/"40 76\1 2 1)"/g \
    $blockMeshDict > temp.$$
    mv temp.$$ $blockMeshDict
    sed \
    -e s/"\(deltaT[ \t]*\) 0.001;"/"\1 5e-04;"/g \
    -e s/"\(endTime[ \t]*\) 1;"/"\1 0.4;"/g \
    $controlDict > temp.$$
    mv temp.$$ $controlDict    
}


# Do damBreak
(cd damBreak && $tutorialPath/runAll)

# Clone case
cloneCase damBreak damBreakFine

cd damBreakFine
    # Modify case
    setDamBreakFine
    cp ../damBreak/0/gamma.org 0/gamma
    # And execute
    runApplication blockMesh
    runApplication setFields
    runApplication decomposePar
    hostname > system/machines
    runParallel $application 4 system/machines
    runApplication reconstructPar
cd ..
