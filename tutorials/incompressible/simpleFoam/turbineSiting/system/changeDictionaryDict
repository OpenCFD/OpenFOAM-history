/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      changeDictionaryDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include        "$FOAM_CASE/0/include/initialConditions"
#include        "$FOAM_CASE/0/include/ABLConditions"

dictionaryReplacement
{

    // Specify
    // - all fvPatchFields with potential non-uniform values
    // - all fvPatchFields originating from meshing
    // - all fvPatchFields originating from mesh-redistribution

    p
    {
        boundaryField
        {
            outlet
            {
                type            uniformFixedValue;
                uniformValue    constant $pressure;
                value           $pressure;
            }
            inlet
            {
                type            zeroGradient;
            }
            "terrain_.*"
            {
                type            zeroGradient;
            }
            ground
            {
                type            zeroGradient;
            }
            #include "$FOAM_CASE/0/include/sideAndTopPatches"
            "procBoundary.*"
            {
                type            processor;
            }
        }
    }

    k
    {
        boundaryField
        {
            outlet
            {
                type            inletOutlet;
                inletValue      uniform 0.0;
                value           uniform $turbulentKE;
            }
            inlet
            {
                type            uniformFixedValue;
                uniformValue    constant $turbulentKE;
            }
            "terrain_.*"
            {
                type            kqRWallFunction;
                value           uniform 0.0;
            }
            ground
            {
                type            zeroGradient;
            }
            #include "$FOAM_CASE/0/include/sideAndTopPatches"
            "procBoundary.*"
            {
                type            processor;
            }
        }
    }

    U
    {
        boundaryField
        {
            outlet
            {
                type            inletOutlet;
                inletValue      uniform (0 0 0);
                value           uniform $flowVelocity;
            }
            inlet
            {
                type            atmBoundaryLayerInletVelocity;
                Uref            $Uref;
                Href            $Href;
                n               $windDirection;
                z               $zDirection;
                z0              $z0;
                zGround         $zGround;
                value           uniform $flowVelocity;
            }
            "terrain_.*"
            {
                type            uniformFixedValue;
                uniformValue    constant $flowVelocity;
            }
            ground
            {
                type            uniformFixedValue;
                uniformValue    constant $flowVelocity;
            }
            #include "$FOAM_CASE/0/include/sideAndTopPatches"
            "procBoundary.*"
            {
                type            processor;
            }
        }
    }

    nut
    {
        boundaryField
        {
            outlet
            {
                type            calculated;
                value           uniform 0;
            }
            inlet
            {
                type            calculated;
                value           uniform 0;
            }
            "terrain_.*"
            {
                type            nutkAtmRoughWallFunction;
                z0              $z0;
                value           uniform 0.0;
            }
            ground
            {
                type            calculated;
                value           uniform 0;
            }
            #include "$FOAM_CASE/0/include/sideAndTopPatches"
            "procBoundary.*"
            {
                type            processor;
            }
        }
    }

    epsilon
    {
        boundaryField
        {
            outlet
            {
                type            zeroGradient;
            }
            inlet
            {
                type            atmBoundaryLayerInletEpsilon;
                z               $zDirection;
                z0              $z0;
                zGround         $zGround;
                Uref            $Uref;
                Href            $Href;
                value           uniform $turbulentEpsilon;
            }
            "terrain_.*"
            {
                type            epsilonWallFunction;
                Cmu             0.09;
                kappa           0.4;
                E               9.8;
                value           uniform $turbulentEpsilon;
            }
            ground
            {
                type            zeroGradient;
            }
            #include "$FOAM_CASE/0/include/sideAndTopPatches"
            "procBoundary.*"
            {
                type            processor;
            }
        }
    }
}

// ************************************************************************* //
