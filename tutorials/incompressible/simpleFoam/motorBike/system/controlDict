/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs            ("libincompressibleRASModels.so");

application     simpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         1000;

deltaT          1;

writeControl    timeStep;

writeInterval   100;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;


functions
{
    // Make sure all fields for functionObjects are loaded. Prevents any
    // problems running with execFlowFunctionObjects.
    readFields
    {
        // Where to load it from (if not already in solver)
        functionObjectLibs ("libfieldFunctionObjects.so");

        type            readFields;
        fields          (p U k);
    }

    streamLines
    {
        type            streamLine;

        // Output every
        outputControl   outputTime;
        // outputInterval 10;

        setFormat       vtk; //gnuplot; //xmgr; //raw; //jplot;

        // Velocity field to use for tracking.
        U U;

        // Tracked forwards (+U) or backwards (-U)
        trackForward    true;

        // Names of fields to sample. Should contain above velocity field!
        fields (p U k);

        // Cells particles can travel before being removed
        lifeTime        1000;

        // Cloud name to use
        cloudName       particleTracks;

        // Seeding method. See the sampleSets in sampleDict.
        seedSampleSet   uniform;  //cloud;//triSurfaceMeshPointSet;

        uniformCoeffs
        {
            type        uniform;
            axis        x;  //distance;

            // Note: tracks slightly offset so as not to be on a face
            start       (-1.001 1E-7 0.0011);
            end         (-1.001 1E-7 1.0011);
            nPoints     20;
        }
    }
}


// ************************************************************************* //
