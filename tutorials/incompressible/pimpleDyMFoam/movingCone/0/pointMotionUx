/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.6                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       pointScalarField;
    object      pointMotionU;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    movingWall
    {
        type            fixedValue;
        value           uniform 1;
    }
    farFieldMoving
    {
        //type            slip;
        type            surfaceSlipDisplacement;
        geometry
        {
            top
            {
                type        searchablePlane;
                planeType   pointAndNormal;
                basePoint   (0 0.0025 0);
               normalVector (0 1 0); 
            }
        };

        // Find projection with surface:
        //     fixedNormal : intersections along prespecified direction
        //     pointNormal : intersections along current pointNormal of patch
        //     nearest     : nearest point on surface
        followMode fixedNormal;

        // if fixedNormal : normal
        projectDirection (0 1 0);

        //- -1 or component to knock out before doing projection
        //wedgePlane      -1;

        //- Points that should remain fixed
        //frozenPointsZone fixedPointsZone;
    }
    fixedWall
    {
        type            fixedValue;
        value           uniform 0;
    }
    axis
    {
        type            symmetryPlane;
    }
    left
    {
        type            fixedValue;
        value           uniform 0;
    }
    farField
    {
        //type            slip;
        type            surfaceSlipDisplacement;
        geometry
        {
            top
            {
                type        searchablePlane;
                planeType   pointAndNormal;
                basePoint   (0 0.0025 0);
               normalVector (0 1 0); 
            }
        };

        followMode fixedNormal;

        projectDirection (0 1 0);

        //- -1 or component to knock out before doing projection
        wedgePlane      -1;

        //- Points that should remain fixed
        //frozenPointsZone fixedPointsZone;
    }
    back
    {
        type            wedge;
    }
    front
    {
        type            wedge;
    }
}

// ************************************************************************* //
